<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Express</title>
    <url>/post/d7c881ac.html</url>
    <content><![CDATA[<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>这里直接使用<code>app.get</code>来处理请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;source/_posts/Express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// respond with &quot;hello world&quot; when a GET request is made to the homepage</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="项目实例"><a href="#项目实例" class="headerlink" title="项目实例"></a>项目实例</h2><p><code>usersController.js</code></p>
<blockquote>
<p>暴露函数</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">register</span> = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>UserRoutes.js</code></p>
<blockquote>
<p>中间件 处理其中一类的请求</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; register &#125; = <span class="built_in">require</span>(<span class="string">&quot;../controllers/usersController&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">路由对象在Express.js中通常被视为一种特殊类型的中间件。当你将路由对象挂载到特定的路径上时，它可以拦截和处理该路径下的请求，类似于其他中间件。路由对象允许你组织和处理特定路径下的请求，因此在这种意义上它可以被认为是中间件的一种。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&quot;source/_posts/Express&quot;</span>).<span class="property">Router</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置请求路径及回调函数</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/register&quot;</span>, register);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure>

<p><code>index.js</code></p>
<blockquote>
<p>中间件 处理其中一类的请求 挂载 userRoutes 到&#x2F;api&#x2F;auth 路径下</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;source/_posts/Express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&quot;cors&quot;</span>);</span><br><span class="line"><span class="comment">// 与mongodb进行交互</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userRoutes = <span class="built_in">require</span>(<span class="string">&quot;./routes/UserRoutes&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;dotenv&quot;</span>).<span class="title function_">config</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// *中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// *挂载userRoutes到api/auth路径下</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;api/auth&quot;</span>, userRoutes);</span><br><span class="line"></span><br><span class="line">mongoose</span><br><span class="line">  .<span class="title function_">connect</span>(process.<span class="property">env</span>.<span class="property">MONGO_URL</span>, &#123;</span><br><span class="line">    <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;DB Connection Success&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error occured&quot;</span>, error.<span class="property">message</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = app.<span class="title function_">listen</span>(process.<span class="property">env</span>.<span class="property">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server Started on Port <span class="subst">$&#123;process.env.PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Commit</title>
    <url>/post/70316f9e.html</url>
    <content><![CDATA[<h3 id="commit-message-格式"><a href="#commit-message-格式" class="headerlink" title="commit message 格式"></a><strong>commit message 格式</strong></h3><p><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</code></p>
<h3 id="type"><a href="#type" class="headerlink" title="type"></a><strong>type</strong></h3><ul>
<li><p>feat：新功能（feature）。</p>
</li>
<li><p>fix&#x2F;to：修复 bug，可以是 QA 发现的 BUG，也可以是研发自己发现的 BUG。</p>
</li>
<li><p>docs：文档（documentation）。</p>
</li>
<li><p>style：格式（不影响代码运行的变动）。</p>
</li>
<li><p>refactor：重构（即不是新增功能，也不是修改 bug 的代码变动）。</p>
</li>
<li><p>perf：优化相关，比如提升性能、体验。</p>
</li>
<li><p>test：增加测试。</p>
</li>
<li><p>chore：构建过程或辅助工具的变动。</p>
</li>
<li><p>revert：回滚到上一个版本。</p>
</li>
<li><p>merge：代码合并。</p>
</li>
<li><p>sync：同步主线或分支的 Bug。</p>
</li>
</ul>
<h3 id="scope-可选"><a href="#scope-可选" class="headerlink" title="scope(可选)"></a><strong>scope(可选)</strong></h3><p>scope 用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p>
<p>例如在 Angular，可以是 location，browser，compile，compile，rootScope， ngHref，ngClick，ngView 等。如果你的修改影响了不止一个 scope，你可以使用*代替。</p>
<h3 id="subject-必须"><a href="#subject-必须" class="headerlink" title="subject(必须)"></a><strong>subject(必须)</strong></h3><p>subject 是 commit 目的的简短描述，不超过 50 个字符。</p>
<ul>
<li><p>结尾不加句号或其他标点符号。</p>
</li>
<li><p>根据以上规范 git commit message 将是如下的格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fix(DAO):用户查询缺少username属性</span><br><span class="line">feat(Controller):用户查询接口开发</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/post/65b69107.html</url>
    <content><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>静态资源服务-通过本地文件系统提供服务</li>
<li>反向代理服务-缓存、负载均衡</li>
<li><code>API</code>服务-<code>openresty</code></li>
</ul>
<h2 id="什么是反向代理？"><a href="#什么是反向代理？" class="headerlink" title="什么是反向代理？"></a>什么是反向代理？</h2><p>什么又是正向代理？</p>
<p>国内的客户想要直接访问 Google 官网是无法连接的，但如果该用户可以访问某服务器 A，而 A 可以访问 Google 官网，那么客户可以将此服务器 A 设置为代理服务器，借助 A 服务器请求获得 Google 的响应报文，再转发给用户。此时这个服务器 A 称之为正向代理服务器。</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/20/172d07ea8b21370a~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp"></p>
<p>反向代理，客户是对代理无感知的。客户只需要向公开的 URL 向代理服务器发送请求，代理服务器再选择目标服务器处理请求并返回数据。</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/20/172d07eec6f96cf3~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp"></p>
<p>总之：</p>
<ul>
<li><strong><code>正向代理</code>，其实是<code>代理服务器</code>代理了<code>客户端</code>，去和<code>目标服务器</code>交互</strong></li>
<li><strong><code>反向代理</code>，<code>代理服务器</code>代理的是<code>目标服务器</code>，去和<code>客户端</code>交互</strong></li>
</ul>
<h2 id="Nginx-如何处理请求"><a href="#Nginx-如何处理请求" class="headerlink" title="Nginx 如何处理请求"></a>Nginx 如何处理请求</h2><ol>
<li><p>接收请求：Nginx 作为服务器软件监听指定的端口，接收客户端发来的请求。</p>
</li>
<li><p>解析请求：Nginx 解析请求的内容，包括请求方法（GET、POST 等）、URL、头部信息等。</p>
</li>
<li><p>配置匹配：Nginx 根据配置文件中的规则和匹配条件，决定如何处理该请求。配置文件定义了<code>虚拟主机</code>、反向代理、负载均衡、缓存等特定的处理方式。</p>
</li>
<li><p>处理请求：Nginx 根据配置的处理方式，可能会进行以下操作：</p>
<ul>
<li><p>静态文件服务：如果请求的是静态资源文件，如 HTML、CSS、JavaScript、图片等，Nginx 可以直接返回文件内容，不必经过后端应用程序。</p>
</li>
<li><p>反向代理：如果配置了反向代理，Nginx 将请求转发给后端的应用服务器，然后将其响应返回给客户端。这样可以提供负载均衡、高可用性和缓存等功能。</p>
</li>
<li><p>缓存：如果启用了缓存，Nginx 可以缓存一些静态或动态内容的响应，在后续相同的请求中直接返回缓存的响应，减少后端负载并提高响应速度。</p>
</li>
<li><p>URL 重写：Nginx 可以根据配置的规则对 URL 进行重写，将请求从一个 URL 重定向到另一个 URL 或进行转换。</p>
</li>
<li><p>SSL&#x2F;TLS 加密：如果启用了 SSL&#x2F;TLS，Nginx 可以负责加密和解密 HTTPS 请求和响应。</p>
</li>
<li><p>访问控制：Nginx 可以根据配置的规则对请求进行访问控制，例如限制 IP 访问、进行身份认证等。</p>
</li>
</ul>
</li>
<li><p>响应结果：Nginx 根据处理结果生成响应报文，包括状态码、头部信息和响应内容。然后将响应发送给客户端。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>网络请求</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Pinia</title>
    <url>/post/74dce755.html</url>
    <content><![CDATA[<h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><ul>
<li>安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></table></figure>

<ul>
<li>入口文件中引入,将 <code>pinia</code>挂载到 <code>Vue</code>应用中</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(pinia);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>创建store</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">/src/store/user.<span class="property">ts</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个参数是应用程序中 store 的唯一 id</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUsersStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;users&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;Jhon&quot;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//leii</span></span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="attr">getAddAge</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">age</span> + <span class="number">100</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>使用store</li>
</ul>
<p>利用 <code>pinia</code>的 <code>storeToRefs</code>函数，将 <code>state</code>中的数据变为了响应式的。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">/src/<span class="title class_">App</span>.<span class="property">vue</span></span><br><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; useUsersStore &#125; <span class="keyword">from</span> <span class="string">&quot;../src/store/user&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useUsersStore</span>();</span><br><span class="line"><span class="keyword">const</span> &#123; name, age, sex &#125; = <span class="title function_">storeToRefs</span>(store);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>批量更改数据</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 较少字段的修改方式</span></span><br><span class="line">&lt;button <span class="meta">@click</span>=<span class="string">&quot;patchStore&quot;</span>&gt;批量修改数据&lt;/button&gt;</span><br><span class="line"><span class="comment">// 批量修改数据</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">patchStore</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  store.$patch(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">23</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">store.$patch(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">  state.<span class="property">items</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;shoes&#x27;</span>, <span class="attr">quantity</span>: <span class="number">1</span> &#125;)</span><br><span class="line">  state.<span class="property">hasChanged</span> = <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>StateManagement</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise</title>
    <url>/post/54b11a0c.html</url>
    <content><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><h2 id="Promise-的基本使用"><a href="#Promise-的基本使用" class="headerlink" title="Promise 的基本使用"></a>Promise 的基本使用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Promise 接受一个函数作为参数</p>
</li>
<li><p>在参数函数中有两个参数</p>
<ul>
<li><p>resolve: 成功函数</p>
</li>
<li><p>reject: 失败函数</p>
</li>
</ul>
</li>
</ul>
<h3 id="1-Promise-的状态"><a href="#1-Promise-的状态" class="headerlink" title="1) Promise 的状态"></a>1) Promise 的状态</h3><p>第一种状态:<code> pending</code></p>
<p>第二种状态: <code>fulfilled</code></p>
<p>第三种状态: <code>rejected</code></p>
<h3 id="2-Promise-状态的改变"><a href="#2-Promise-状态的改变" class="headerlink" title="2) Promise 状态的改变"></a>2) Promise 状态的改变</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// resolve(): 调用函数, 使当前Promise对象的状态改成fulfilled</span></span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(p); <span class="comment">// fulfilled</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// resolve(): 调用函数, 使当前Promise对象的状态改成fulfilled</span></span><br><span class="line">  <span class="comment">// reject(): 调用函数, 使当前Promise对象的状态改成rejected</span></span><br><span class="line">  <span class="comment">// resolve();</span></span><br><span class="line">  <span class="title function_">reject</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(p);</span><br></pre></td></tr></table></figure>

<ul>
<li>resolve(): 调用函数, 使当前 Promise 对象的状态改成<code>fulfilled</code></li>
<li>reject(): 调用函数,使当前 Promise 对象状态改成<code>rejected</code></li>
</ul>
<h3 id="3-Promise-的结果"><a href="#3-Promise-的结果" class="headerlink" title="3) Promise 的结果"></a>3) Promise 的结果</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 通过调用 resolve,传递参数,改变 当前Promise对象的结果</span></span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&quot;成功的结果&quot;</span>);</span><br><span class="line">  <span class="comment">// resolve();</span></span><br><span class="line">  <span class="comment">// reject(&quot;失败的结果&quot;)</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(p);</span><br></pre></td></tr></table></figure>

<h2 id="Promise-的方法"><a href="#Promise-的方法" class="headerlink" title="Promise 的方法"></a>Promise 的方法</h2><h3 id="1-then-方法"><a href="#1-then-方法" class="headerlink" title="1) then 方法"></a>1) then 方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 通过调用 resolve,传递参数,改变 当前Promise对象的结果</span></span><br><span class="line">  <span class="comment">// resolve(123);</span></span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&quot;失败的结果&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//then方法函数</span></span><br><span class="line"><span class="comment">// - 参数</span></span><br><span class="line"><span class="comment">// 两个参数都是函数</span></span><br><span class="line"><span class="comment">// 返回值: 是一个Promise对象</span></span><br><span class="line">p.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//当Promise的状态使fulfilled时执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功的回调&quot;</span>, value);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 当Promise的状态时rejected时, 执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败时调用&quot;</span>, err);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(p);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 then 方法中,通过 return 将返回的 Promise 实例改为 fulfilled 状态</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果Promise的状态不改变,then里的方法不会执行</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line"><span class="keyword">const</span> t = p.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">    <span class="comment">// 使用return可以将t实例的状态改为fulfilled</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line">t.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功2&quot;</span>, value);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败2&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 then 方法中,出现代码错误,将返回的 Promise 实例改为 rejected 状态</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果Promise的状态改变,then里的方法不会执行</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> t = p.<span class="property">then</span>.(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功&quot;</span>)</span><br><span class="line">  <span class="comment">// 使用return可以将t实例的状态改为fulfilled</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">&#125;,<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 如果这里代码出错,会将t实例的状态改为rejected</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">t.<span class="property">then</span>.(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功2&quot;</span>,value)</span><br><span class="line">&#125;,<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败2&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-catch-方法"><a href="#2-catch-方法" class="headerlink" title="2) catch 方法"></a>2) catch 方法</h3><blockquote>
<p>示例</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="comment">// reject()</span></span><br><span class="line">  <span class="comment">// console.log(a)</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;出错了&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 思考: catch中的参数函数在什么时候被执行</span></span><br><span class="line"><span class="comment">//  1. 当Promise的状态改为rejcted.被执行</span></span><br><span class="line"><span class="comment">//  2. 当Promise执行过程出现代码错误时,被执行</span></span><br><span class="line">p.<span class="title function_">catch</span>((<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败&quot;</span>, reason)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br></pre></td></tr></table></figure>

<h2 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async 和 await"></a>async 和 await</h2><h2 id="1-async-函数"><a href="#1-async-函数" class="headerlink" title="1) async 函数"></a>1) async 函数</h2><ol>
<li>函数的返回值为 promise 对象</li>
<li>promise 对象的结果由 async 函数执行的返回值决定</li>
</ol>
<p>示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 1.如果返回值是一个非Promise类型的数据</span></span><br><span class="line">  <span class="comment">//  return 一个字符串 数字 布尔值等都是成功的Promise对象</span></span><br><span class="line">  <span class="comment">// 2. 如果返回的时一个Promise对象</span></span><br><span class="line">  <span class="comment">//  return new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//  resolve(&quot;OK&quot;) 返回的是成功Promise对象,状态值:[[PromiseState]]:&quot;fulfilled&quot;</span></span><br><span class="line">  <span class="comment">//  reject(&quot;Err&quot;) 返回的是失败Promise对象,状态值:[[PromiseState]]:&quot;rejected&quot;</span></span><br><span class="line">  <span class="comment">// 3. 抛出异常</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&quot;oh No&quot;</span> <span class="comment">// 状态值:[[PromiseState]]:&quot;rejected&quot;,结果是抛出的值</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">main</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure>

<p>返回值是一个 Promise 对象</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/2934759/1615302593894-e1a59c34-08ff-4241-8eba-5512b1718bde.png" alt="img"></p>
<h2 id="2-await-表达式"><a href="#2-await-表达式" class="headerlink" title="2) await 表达式"></a>2) await 表达式</h2><ol>
<li>await 右侧的表达式一般为 promise 对象, 但也可以是其它的值</li>
<li>如果表达式是 promise 对象, await 返回的是 promise 成功的值</li>
<li>如果表达式是其它值, 直接将此值作为 await 的返回值</li>
</ol>
<p>注意</p>
<ol>
<li>await 必须写在 async 函数中, 但 async 函数中可以没有 await</li>
<li>如果 await 的 promise 失败了, 就会抛出异常, 需要通过 try…catch 捕获处理</li>
</ol>
<h2 id="3-async-和-await-结合"><a href="#3-async-和-await-结合" class="headerlink" title="3) async 和 await 结合"></a>3) async 和 await 结合</h2><p>示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&quot;util&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> mineReadFile = util.<span class="title function_">promisify</span>(fs.<span class="property">readFile</span>);<span class="comment">// promisify转换为Promise形态的函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 捕获处理</span></span><br><span class="line">	<span class="keyword">try</span>&#123;</span><br><span class="line">  	<span class="comment">// 读取第一个文件的内容</span></span><br><span class="line">    <span class="keyword">let</span> data1 = <span class="keyword">await</span> <span class="title function_">mineReadFile</span>(<span class="string">&quot;./resource/1.html&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> data2 = <span class="keyword">await</span> <span class="title function_">mineReadFile</span>(<span class="string">&quot;./resource/2.html&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> data3 = <span class="keyword">await</span> <span class="title function_">mineReadFile</span>(<span class="string">&quot;./resource/3.html&quot;</span>);</span><br><span class="line">  &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">  	<span class="variable language_">console</span>.<span class="title function_">log</span>(e):</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Repair</title>
    <url>/post/89483117.html</url>
    <content><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li><strong>数字（Number）</strong>，整数或浮点数，例如： 42 或者 3.14159。</li>
<li><strong>任意精度的整数 (BigInt)</strong> ，可以安全地存储和操作大整数，甚至可以超过数字的安全整数限制。</li>
<li><strong>字符串（String）</strong>，字符串是一串表示文本值的字符序列，例如：”Howdy” 。</li>
<li><strong>布尔值（Boolean）</strong>，有 2 个值分别是：true 和 false.</li>
<li><strong>null</strong>，一个表明 null 值的特殊关键字。JavaScript 是大小写敏感的，因此 null 与 Null、NULL 或变体完全不同。</li>
<li><strong>undefined</strong>，和 null 一样是一个特殊的关键字，undefined 表示变量未赋值时的属性。</li>
<li><strong>代表（Symbol）</strong>( 在 ECMAScript 6 中新添加的类型)。一种实例是唯一且不可改变的数据类型。</li>
<li><strong>对象（Object）</strong>，即引用类型。包括 Object Array、Function 等。</li>
</ul>
<h2 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h2><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>能判断所有<strong>值类型，函数</strong>。不可对 <strong>null、对象、数组</strong>进行精确判断，因为都返回 <code>object</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">2</span>); <span class="comment">// number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>); <span class="comment">// boolean</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&quot;str&quot;</span>); <span class="comment">// string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Symbol</span>(<span class="string">&quot;foo&quot;</span>)); <span class="comment">// symbol</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">2172141653n</span>); <span class="comment">// bigint</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;); <span class="comment">// function</span></span><br><span class="line"><span class="comment">// 不能判别</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> []); <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123;&#125;); <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">// object</span></span><br></pre></td></tr></table></figure>

<p>typeof 可以判断 function</p>
<p>typeof 只能判断基础类型</p>
<h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p><code>instanceof</code>能判断<strong>对象</strong>类型，不能判断基本数据类型，</p>
<p>判断不了 Error 基础数据类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">People</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vortesnail = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vortesnail <span class="keyword">instanceof</span> <span class="title class_">People</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vortesnail <span class="keyword">instanceof</span> <span class="title class_">Student</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>其实现就是顺着<strong>原型链</strong>去找，如果能找到对应的 <code>Xxxxx.prototype</code> 即为 <code>true</code> 。比如这里的 <code>vortesnail</code> 作为实例，顺着原型链能找到 <code>Student.prototype</code> 及 <code>People.prototype</code> ，所以都为 <code>true</code> 。</p>
<h3 id="Object-toString"><a href="#Object-toString" class="headerlink" title="Object.toString"></a>Object.toString</h3><p>所有原始数据类型都是能判断的，还有 <strong>Error 对象，Date 对象</strong>等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">2</span>); <span class="comment">// &quot;[object Number]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// &quot;[object String]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">true</span>); <span class="comment">// &quot;[object Boolean]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">undefined</span>); <span class="comment">// &quot;[object Undefined]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">null</span>); <span class="comment">// &quot;[object Null]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="title class_">Math</span>); <span class="comment">// &quot;[object Math]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(&#123;&#125;); <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([]); <span class="comment">// &quot;[object Array]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;); <span class="comment">// &quot;[object Function]&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="与-的作用与区别（严格相等）"><a href="#与-的作用与区别（严格相等）" class="headerlink" title="==与===的作用与区别（严格相等）"></a><code>==</code>与<code>===</code>的作用与区别（严格相等）</h2><p><a href="https://zh.javascript.info/comparison">值的比较</a></p>
<p>普通的相等性检查 <code>==</code> 存在一个问题，它不能区分出 <code>0</code> 和 <code>false</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;🚀 ~ file: script.js:2 ~ 0==false:&quot;</span>, <span class="number">0</span> == <span class="literal">false</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;🚀 ~ file: script.js:2 ~ 0 === false:&quot;</span>, <span class="number">0</span> === <span class="literal">false</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p><code>&#39;&#39;</code>和 false 也无法区分</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;🚀 ~ file: script.js:4 ~ &#x27;&#x27; == false;:&quot;</span>, <span class="string">&quot;&quot;</span> == <span class="literal">false</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>原因是：比较不同类型的值时，处于相等判断符号 <code>==</code> 两侧的值会先被转化为数字，空字符串和 <code>false</code> 也是如此，转化后它们都为数字 0</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a><a href="https://juejin.cn/post/7204243582378115132?searchId=20230922095929303C6A71AD841475833B">数组方法</a></h3><p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/readme/202309221134892.png" alt="image-20230922113430665"></p>
<p><strong>1、concat()</strong></p>
<p>concat(): 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p>
<blockquote>
<p>语法: concat(value0, value1, &#x2F;_ … ,_&#x2F; valueN)</p>
<blockquote>
<p><code>valueN</code>(可选): 数组和&#x2F;或值，将被合并到一个新的数组中。如果省略了所有 <code>valueN</code> 参数，则 <code>concat</code> 会返回调用此方法的现存数组的一个浅拷贝</p>
</blockquote>
<p>返回值：新的 Array 实例</p>
</blockquote>
<p><strong><em>代码示例(如下)</em></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> num2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> num3 = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = num1.<span class="title function_">concat</span>(num2, num3);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure>

<p><strong>2、join()</strong><br>join(): 方法将一个数组（或一个类数组)的所有元素连接成一个字符串并返回这个字符串，用逗号或指定的分隔符字符串分隔。如果数组只有一个元素，那么将返回该元素而不使用分隔符。</p>
<blockquote>
<p>语法: join(separator)</p>
<blockquote>
<p><code>separator</code>(可选): 指定一个字符串来分隔数组的每个元素。如果需要，将分隔符转换为字符串。如果省略，数组元素用逗号（<code>,</code>）分隔。如果 <code>separator</code> 是空字符串（<code>&quot;&quot;</code>），则所有元素之间都没有任何字符</p>
</blockquote>
<p>返回值：一个所有数组元素连接的字符串。如果 <code>arr.length</code> 为 0，<strong>则返回空字符串</strong></p>
</blockquote>
<p><strong><em>代码示例(如下)</em></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">复制代码<span class="keyword">const</span> a = [<span class="string">&quot;wjk&quot;</span>, <span class="string">&quot;shh&quot;</span>, <span class="string">&quot;zyh&quot;</span>];</span><br><span class="line">a.<span class="title function_">join</span>(); <span class="comment">// &#x27;wjk,shh,zyh&#x27;</span></span><br><span class="line">a.<span class="title function_">join</span>(<span class="string">&quot;, &quot;</span>); <span class="comment">// &#x27;wjk, shh, zyh&#x27;</span></span><br><span class="line">a.<span class="title function_">join</span>(<span class="string">&quot; + &quot;</span>); <span class="comment">// &#x27;wjk + shh + zyh&#x27;</span></span><br><span class="line">a.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// &#x27;wjkshhzyh&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>3、pop()</strong><br>pop(): 方法从数组中删除最后一个元素，并返回该元素的值。此方法会更改数组的长度。</p>
<blockquote>
<p>语法: concat(value0, value1, &#x2F;_ … ,_&#x2F; valueN)</p>
<p>返回值：从数组中删除的元素（当数组为空时返回 <strong>undefined</strong>）。</p>
</blockquote>
<p><strong><em>代码示例(如下)</em></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">复制代码<span class="keyword">const</span> a = [<span class="string">&quot;wjk&quot;</span>, <span class="string">&quot;shh&quot;</span>, <span class="string">&quot;www&quot;</span>, <span class="string">&quot;kkk&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = a.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// [&#x27;wjk&#x27;,&#x27;shh&#x27;,&#x27;www&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// &#x27;kkk&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>4、shift()</strong><br>shift(): 方法从数组中删除<strong>第一个</strong>元素，并返回该元素的值。此方法更改数组的长度。</p>
<blockquote>
<p>xxxxxxxxxx const fs &#x3D; require(“fs”);const util &#x3D; require(“util”);const mineReadFile &#x3D; util.promisify(fs.readFile);&#x2F;&#x2F; promisify转换为Promise形态的函数​async function main(){  &#x2F;&#x2F; 捕获处理    try{    &#x2F;&#x2F; 读取第一个文件的内容    let data1 &#x3D; await mineReadFile(“.&#x2F;resource&#x2F;1.html”);    let data2 &#x3D; await mineReadFile(“.&#x2F;resource&#x2F;2.html”);    let data3 &#x3D; await mineReadFile(“.&#x2F;resource&#x2F;3.html”);  }catch(e){    console.log(e):  }}javascript</p>
<p>返回值：从数组中删除的元素 (如果数组为空则返回 <strong>undefined</strong>)。</p>
</blockquote>
<p><strong><em>代码示例(如下)</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">复制代码<span class="keyword">let</span> a = [<span class="string">&quot;wjk&quot;</span>, <span class="string">&quot;zzh&quot;</span>, <span class="string">&quot;ws&quot;</span>, <span class="string">&quot;zsl&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;调用 shift 之前：&quot;</span> + a);</span><br><span class="line"><span class="comment">// &quot;调用 shift 之前：wjk,zzh,ws,zsl&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shifted = a.<span class="title function_">shift</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;调用 shift 之后：&quot;</span> + a);</span><br><span class="line"><span class="comment">// &quot;调用 shift 之后：[zzh,ws,zsl&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;被删除的元素：&quot;</span> + shifted);</span><br><span class="line"><span class="comment">// &quot;被删除的元素：wjk&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>5、unshift()</strong><br>unshift(): 方法将一个或多个元素添加到数组的<strong>开头</strong>，并返回该数组的<strong>新长度</strong>。</p>
<blockquote>
<p>语法: unshift(element0, element1, &#x2F;_ … ,_&#x2F; elementN)</p>
<blockquote>
<p><code>elementN</code>: 要添加到数组开头的元素。</p>
</blockquote>
<p>返回值：返回调用方法对象的新 <strong>length</strong> 属性值。</p>
</blockquote>
<p><strong><em>代码示例(如下)</em></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ini复制代码arr = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="number">4</span>);</span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="number">5</span>);</span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"><span class="comment">// [6, 5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure>

<p><strong>6、push()</strong><br>push(): 方法将一个或多个元素添加到数组的末尾，并返回该数组的<strong>新长度</strong>。</p>
<blockquote>
<p>语法: push(element0, element1, &#x2F;_ … ,_&#x2F; elementN)</p>
<blockquote>
<p><code>elementN</code>: 被添加到数组末尾的元素。</p>
</blockquote>
<p>返回值：当调用该方法的时候，新的 <strong>length</strong> 属性值将被返回。</p>
</blockquote>
<p><strong><em>代码示例(如下)</em></strong></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">ini复制代码let <span class="attr">a</span> = [<span class="string">&quot;wjk&quot;</span>, <span class="string">&quot;zyh&quot;</span>]<span class="comment">;</span></span><br><span class="line">let <span class="attr">b</span> = a.push(<span class="string">&quot;ws&quot;</span>, <span class="string">&quot;zzh&quot;</span>)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">console.log(sports)<span class="comment">;</span></span><br><span class="line">// <span class="section">[&quot;wjk&quot;, &quot;zyh&quot;, &quot;ws&quot;, &quot;zzh&quot;]</span></span><br><span class="line"></span><br><span class="line">console.log(b)<span class="comment">;</span></span><br><span class="line">// 4</span><br></pre></td></tr></table></figure>

<p><strong>7、reverse()</strong><br>reverse(): 方法将数组中元素的位置颠倒，并返回该数组，该方法会改变原数组。</p>
<blockquote>
<p>语法: reverse()</p>
<p>返回值：颠倒后的数组。</p>
</blockquote>
<p><strong><em>代码示例(如下)</em></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">a.<span class="title function_">reverse</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// [3, 2, 1]</span></span><br></pre></td></tr></table></figure>

<p><strong>8、slice()</strong><br>slice(): 方法将数组部分的副本返回到新的数组对象中。这个对象是从 <code>start</code> 到 <code>end</code> 选择的（包括 <code>start</code>，不包括<code>end</code>）。<strong>需要注意的是，此方法不会修改原始数组</strong>。</p>
<blockquote>
<p>语法: slice(start, end)</p>
<blockquote>
<p><code>start</code>(可选)： 是一个从 <code>0</code> 开始的索引，用于开始复制数组的一部分。如果未定义，<code>start</code> 的默认值为 <code>0</code>。如果 <code>start</code> 大于数组的索引范围， <code>slice()</code> 方法将返回一个空数组，此外，<code>start</code> 还可以使用负索引， <code>slice(-1)</code> 提取数组的最后一个元素。</p>
<p><code>end</code>(可选)：规定从何处结束选取，如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果该参数为负数， 则它表示在原数组中的倒数第几个元素结束抽取。</p>
</blockquote>
<p>返回值：一个含有被提取元素的新数组。</p>
</blockquote>
<p><strong><em>代码示例(如下)</em></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="string">&quot;www&quot;</span>, <span class="string">&quot;jjj&quot;</span>, <span class="string">&quot;kkk&quot;</span>, <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> b = a.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> c = a.<span class="title function_">slice</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">//[&#x27;jjj&#x27;, &#x27;kkk&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line">[<span class="string">&quot;www&quot;</span>, <span class="string">&quot;jjj&quot;</span>, <span class="string">&quot;kkk&quot;</span>, <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>];</span><br></pre></td></tr></table></figure>

<p><strong>9、sort()</strong><br>sort(): 方法对数组的元素进行排序，并返回数组。</p>
<blockquote>
<p>语法: sort((a, b) &#x3D;&gt; { &#x2F;_ … _&#x2F; } )</p>
<blockquote>
<p><code>compareFn</code>(可选)：用来指定按某种顺序进行排列的函数。如果省略，元素按照转换为的字符串的各个字符的 Unicode 位点进行排序。</p>
<p><code>a</code>：第一个用于比较的元素<br><code>b</code>： 第二个用于比较的元素。</p>
<p>若 a 小于 b，即 a - b 小于零，则返回一个小于零的值，<strong>数组将按照升序排列</strong>。</p>
<p>若 a 等于 b，则返回 0。</p>
<p>若 a 大于 b, 即 a - b 大于零，则返回一个大于零的值，<strong>数组将按照降序排列。</strong></p>
<p>x const fs &#x3D; require(“fs”);const util &#x3D; require(“util”);const mineReadFile &#x3D; util.promisify(fs.readFile);&#x2F;&#x2F; promisify 转换为 Promise 形态的函数 ​async function main(){  &#x2F;&#x2F; 捕获处理 try{ &#x2F;&#x2F; 读取第一个文件的内容    let data1 &#x3D; await mineReadFile(“.&#x2F;resource&#x2F;1.html”);    let data2 &#x3D; await mineReadFile(“.&#x2F;resource&#x2F;2.html”);    let data3 &#x3D; await mineReadFile(“.&#x2F;resource&#x2F;3.html”); }catch(e){ console.log(e): }}javascript</p>
</blockquote>
<p>返回值：排序后的数组。</p>
</blockquote>
<table>
<thead>
<tr>
<th><code>compareFn(a, b)</code> 返回值</th>
<th>排序顺序</th>
</tr>
</thead>
<tbody><tr>
<td>&gt; 0</td>
<td><code>a</code> 在 <code>b</code> 后</td>
</tr>
<tr>
<td>&lt; 0</td>
<td><code>a</code> 在 <code>b</code> 前</td>
</tr>
<tr>
<td>&#x3D;&#x3D;&#x3D; 0</td>
<td>保持 <code>a</code> 和 <code>b</code> 的顺序</td>
</tr>
</tbody></table>
<p><strong><em>代码示例(如下)</em></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//升序</span></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line">nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//降序</span></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line">nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums);</span><br><span class="line"><span class="comment">// [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure>

<p><strong>10、splice()</strong><br>splice(): 方法用于添加或删除数组中的元素。此方法会改变原数组。</p>
<blockquote>
<p>语法: <em>array</em>.splice(<em>start</em>,<em>howmany</em>,<em>item1</em>,…..,<em>itemX</em>)</p>
<blockquote>
<p><code>start</code>：规定从何处添加&#x2F;删除元素，该参数是开始插入和（或）删除的数组元素的下标，如果是负值，则表示从数组末位开始的第几位，必须是数字。</p>
<p><code>howmany</code>(可选)：整规定应该删除多少元素。必须是数字，但可以是 “0”，如果未规定此参数，则删除从 start 开始到原数组结尾的所有元素。</p>
<p><code>item1,..., itemX</code>(可选)：要添加进数组的元素，从<code>start</code> 位置开始。如果不指定，则 <code>splice()</code> 将只删除数组元素。</p>
</blockquote>
<p>返回值：由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组。</p>
</blockquote>
<p><strong><em>代码示例(如下)</em></strong></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">lua复制代码var a = [<span class="string">&#x27;wjk&#x27;</span>, <span class="string">&#x27;shy&#x27;</span>, <span class="string">&#x27;czh&#x27;</span>, <span class="string">&#x27;ws&#x27;</span>];</span><br><span class="line">a.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">&#x27;zsl&#x27;</span>, <span class="string">&#x27;why&#x27;</span>);</span><br><span class="line">consle.<span class="built_in">log</span>(a) //<span class="string">&#x27;wjk&#x27;</span>, <span class="string">&#x27;shy&#x27;</span>, <span class="string">&#x27;zsl&#x27;</span>, <span class="string">&#x27;why&#x27;</span>, <span class="string">&#x27;czh&#x27;</span>, <span class="string">&#x27;ws&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>11、toString()</strong><br>toString(): 方法返回一个字符串，表示指定的数组及其元素。</p>
<blockquote>
<p>语法: toString()</p>
<p>返回值：一个表示数组所有元素的字符串。</p>
</blockquote>
<p><strong><em>代码示例(如下)</em></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1.<span class="title function_">toString</span>());</span><br><span class="line"><span class="comment">//&quot;1,2,a,b&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>12、valueOf()</strong><br>valueOf(): 方法返回 Array 对象的原始值，不会改变原数组。</p>
<blockquote>
<p>语法: array.valueOf()</p>
<p>返回值：返回的是一个对象，也是原对象本身。</p>
</blockquote>
<p><strong><em>代码示例(如下)</em></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> array.<span class="title function_">valueOf</span>()); <span class="comment">//object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">valueOf</span>() === array); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p><strong>13、indexOf()</strong><br>indexOf(): 方法返回在数组中可以找到给定元素的第一个索引，如果不存在，则返回 -1。</p>
<blockquote>
<p>语法: indexOf(item, fromIndex)</p>
<blockquote>
<p><code>item</code>: 要查找的元素。</p>
<p><code>fromIndex</code>(可选)：规定在数组中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1，如果是负数就是倒数到位置开始</p>
</blockquote>
<p>返回值：首个被找到的元素在数组中的索引位置; 若没有找到则返回 <strong>-1</strong>。</p>
</blockquote>
<p><strong><em>代码示例(如下)</em></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">2</span>, <span class="number">9</span>, <span class="number">9</span>];</span><br><span class="line">array.<span class="title function_">indexOf</span>(<span class="number">2</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<p><strong>14、lastIndexOf()</strong><br>lastIndexOf(): 方法返回指定元素在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 <code>fromIndex</code> 处开始。</p>
<blockquote>
<p>语法: lastIndexOf(searchElement, fromIndex)</p>
<blockquote>
<p><code>searchElement</code>: 被要查找的元素。</p>
<p><code>fromIndex</code>(可选)：规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的最后一个字符处开始检索。即使该值为负，数组仍然会被从后向前查找。如果该值为负时，其绝对值大于数组长度，则方法返回 -1，即数组不会被查找。</p>
</blockquote>
<p>返回值：数组中该元素最后一次出现的索引，如未找到返回 <code>-1</code>。</p>
</blockquote>
<p><strong><em>代码示例(如下)</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">2</span>, <span class="number">9</span>, <span class="number">9</span>];</span><br><span class="line">array.<span class="title function_">lastIndexOf</span>(<span class="number">9</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p><strong>15、forEach()</strong><br>forEach(): 方法对数组的每个元素执行一次给定的函数。</p>
<blockquote>
<p>语法: arr.forEach(callbackFn(currentValue [, index [, array]])[, thisArg]);</p>
<blockquote>
<p><code>callbackFn</code>: 为数组中每个元素执行的，函数函数调用时带有以下参数：</p>
<blockquote>
<p><code>currentValue</code>：数组中正在处理的当前元素值。</p>
<p><code>index</code>(可选)：数组中正在处理的当前元素的索引。</p>
<p><code>array</code>(可选)：<code>forEach()</code> 方法正在操作的数组。</p>
<p><code>thisArg</code>(可选)：可选参数。当执行回调函数 <code>callbackFn</code> 时，用作 <code>this</code> 的值。</p>
</blockquote>
</blockquote>
<p>返回值：<code>undefined</code>。</p>
</blockquote>
<p><strong><em>代码示例(如下)</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> result = arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">ele, index</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ele); <span class="comment">// 数组元素  red   green  blue</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index); <span class="comment">// 索引号</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>16、map()</strong><br>map(): 方法创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成。</p>
<blockquote>
<p>语法: array.map(function(currentValue, index, arr), thisIndex)</p>
<blockquote>
<p><code>callbackFn</code>: 生成新数组元素的函数，使用三个参数：</p>
<blockquote>
<p><code>currentValue</code>: <code>callbackFn</code> 数组中正在处理的当前元素值。</p>
<p><code>index</code>: <code>callbackFn</code> 数组中正在处理的当前元素的索引。</p>
<p><code>array</code>: <code>map</code> 方法调用的数组。</p>
<p><code>thisArg</code>(可选)：可选参数。当执行回调函数 <code>callbackFn</code> 时，用作 <code>this</code> 的值。</p>
</blockquote>
</blockquote>
<p>返回值：一个新数组，每个元素都是回调函数的返回值。</p>
</blockquote>
<p><strong><em>代码示例(如下)</em></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newArray = array.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item * item;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray)  <span class="comment">// [1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure>

<p><strong>17、filter()</strong><br>filter(): 方法创建给定数组一部分的浅拷贝，其包含通过所提供函数实现的测试的所有元素。</p>
<blockquote>
<p>语法: Array.filter(function(currentValue, indedx, arr), thisValue)</p>
<blockquote>
<p><code>callbackFn</code>: 用来测试数组中每个元素的函数。返回 <code>true</code> 表示该元素通过测试，保留该元素，<code>false</code> 则不保留。它接受以下三个参数：</p>
<blockquote>
<p><code>currentValue</code>: <code>callbackFn</code> 数组中正在处理的当前元素值。</p>
<p><code>index</code>(可选): <code>callbackFn</code> 数组中正在处理的当前元素的索引。</p>
<p><code>array</code>(可选): <code>filter</code> 方法调用的数组。		</p>
<p><code>thisArg</code>(可选)：可选参数。当执行回调函数 <code>callbackFn</code> 时，用作 <code>this</code> 的值。</p>
</blockquote>
</blockquote>
<p>返回值：一个新的、由通过测试的元素组成的数组，如果没有任何数组元素通过测试，则返回空数组。</p>
</blockquote>
<p><strong><em>代码示例(如下)</em></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">let</span> res = nums.<span class="title function_">filter</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num &gt; <span class="number">5</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);  <span class="comment">// [6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组去重</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> arrFIlter1 = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">ele, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(ele) === index;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrFIlter1);</span><br></pre></td></tr></table></figure>

<p><strong>18、every()</strong><br>every(): 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。<br><code>注意</code>：若收到一个空数组，此方法在任何情况下都会返回 <code>true</code>。</p>
<blockquote>
<p>语法: Array.every(function(currentValue,index,arr), thisValue)</p>
<blockquote>
<p><code>callbackFn</code>: 用来测试数组中每个元素的函数。返回 <code>true</code> 表示该元素通过测试，保留该元素，<code>false</code> 则不保留。它接受以下三个参数：</p>
<blockquote>
<p><code>currentValue</code>: <code>callbackFn</code> 数组中正在处理的当前元素值。</p>
<p><code>index</code>(可选): <code>callbackFn</code> 数组中正在处理的当前元素的索引。</p>
<p><code>array</code>(可选): <code>every</code> 方法调用的数组。</p>
<p><code>thisArg</code>(可选)：可选参数。当执行回调函数 <code>callbackFn</code> 时，用作 <code>this</code> 的值。</p>
</blockquote>
</blockquote>
<p>返回值：如果回调函数的每一次返回都为<code>真值</code>，返回 **<code>true</code>**，否则返回 **<code>false</code>**。</p>
</blockquote>
<p><strong><em>代码示例(如下)</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>].<span class="title function_">every</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x &gt;= <span class="number">10</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">let</span> flag = arr.<span class="title function_">every</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item &amp;&amp; item.<span class="property">age</span> &gt; <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag); <span class="comment">//输出的是true</span></span><br></pre></td></tr></table></figure>

<p><strong>19、some()</strong><br>some(): 如果有一个元素满足条件，则表达式返回<em>true</em> , 剩余的元素不会再执行检测，如果没有满足条件的元素，则返回 false。</p>
<p><code>注意</code>：如果用一个空数组进行测试，在任何情况下它返回的都是<code>false</code>。</p>
<blockquote>
<p>语法: Array.every(function(currentValue,index,arr), thisValue)</p>
<blockquote>
<p><code>callbackFn</code>: 用来测试数组中每个元素的函数。返回 <code>true</code> 表示该元素通过测试，保留该元素，<code>false</code> 则不保留。它接受以下三个参数：</p>
<blockquote>
<p><code>currentValue</code>: <code>callbackFn</code> 数组中正在处理的当前元素值。</p>
<p><code>index</code>(可选): <code>callbackFn</code> 数组中正在处理的当前元素的索引。</p>
<p><code>array</code>(可选): <code>some</code> 方法调用的数组。</p>
<p><code>thisArg</code>(可选)：可选参数。当执行回调函数 <code>callbackFn</code> 时，用作 <code>this</code> 的值。</p>
</blockquote>
</blockquote>
<p>返回值：数组中有至少一个元素通过回调函数的测试就会返回 **<code>true</code>**；所有元素都没有通过回调函数的测试返回值才会为 false。</p>
</blockquote>
<p><strong><em>代码示例(如下)</em></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">11</span>].<span class="title function_">some</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x &gt; <span class="number">10</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>20、reduce()</strong><br>reduce(): 方法对数组中的每个元素执行一个由您提供的 reduce 函数(升序执行)，将其结果汇总为单个返回值。</p>
<blockquote>
<p>语法: Array.reduce(function(accumulator, currentValue, currentIndex, arr), initialValue);</p>
<blockquote>
<p><code>callbackFn</code>: 一个“reducer”函数，包含四个参数：</p>
<blockquote>
<p><code>accumulator</code>: 累计器。</p>
<p><code>currentValue</code>: 当前元素。</p>
<p><code>currentIndex</code>(可选): 当前元素的索引。</p>
<p><code>arr</code>(可选): 要处理的数组。</p>
<p><code>initialValue</code>(可选): 传递给函数的初始值，相当于 accumulator 的初始值。</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<p>返回值：使用“reducer”回调函数遍历整个数组后的结果。</p>
</blockquote>
<p><strong><em>代码示例(如下)</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单来说就是对一个array执行reduce()方法，</span></span><br><span class="line"><span class="comment">//就是把其中的function()挨个地作用于arr中的元素上，</span></span><br><span class="line"><span class="comment">//而且上一次的输出会作为下一次的一个输入</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> s = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, curr</span>) =&gt;</span> sum + curr, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">//15</span></span><br></pre></td></tr></table></figure>

<p><strong>21、reduceRight()</strong><br>reduceRight():reduceRight() 方法的功能和 reduce()功能是一样的，不同的是 reduceRight() 从数组的末尾向前将数组中的数组项做累加。</p>
<blockquote>
<p>语法: Array.reduceRight(function(total, currentValue, currentIndex, arr), initialValue)</p>
<blockquote>
<p><code>callbackFn</code>: 一个回调函数，用于操作数组中的每个元素，它可接受四个参数：</p>
<blockquote>
<p><code>accumulator</code>: 累计器。</p>
<p><code>currentValue</code>: 当前元素。</p>
<p><code>currentIndex</code>(可选): 当前元素的索引。</p>
<p><code>arr</code>(可选): 要处理的数组。</p>
<p><code>initialValue</code>(可选): 传递给函数的初始值，相当于 accumulator 的初始值。</p>
</blockquote>
</blockquote>
<p>返回值：执行之后的返回值。</p>
</blockquote>
<p><strong><em>代码示例(如下)</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单来说就是对一个array执行reduce()方法，</span></span><br><span class="line"><span class="comment">//就是把其中的function()挨个地作用于arr中的元素上，</span></span><br><span class="line"><span class="comment">//而且上一次的输出会作为下一次的一个输入</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> s = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, curr</span>) =&gt;</span> sum + curr, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">//15</span></span><br></pre></td></tr></table></figure>

<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><ul>
<li><p><code>filter</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// filter过滤</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  nums.<span class="title function_">filter</span>(<span class="function">(<span class="params">num, index, nums</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> nums.<span class="title function_">indexOf</span>(num) === index;</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Set/Array.form</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Set+Array.from</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Set/Array.from:&quot;</span>, <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(nums)));</span><br></pre></td></tr></table></figure>

<p>有个小问题：无法去重引用类型数据</p>
</li>
<li><p>古老的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//古老的双重循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = nums1.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums1[i] == nums1[j]) &#123;</span><br><span class="line">      nums1.<span class="title function_">splice</span>(j, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>indexOf</code>&#x2F;<code>includes()</code> 改一下判断条件即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> repeatArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = nums.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="comment">// if (repeatArr.includes(!nums[i]))</span></span><br><span class="line">  <span class="keyword">if</span> (repeatArr.<span class="title function_">indexOf</span>(nums[i]) == -<span class="number">1</span>) &#123;</span><br><span class="line">    repeatArr.<span class="title function_">push</span>(nums[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>reduce</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reduceMethod</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">res, currentNum</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!res.<span class="title function_">includes</span>(currentNum)) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(currentNum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对象数组去重</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">objArryTo</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">const</span> mapList = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mapList.<span class="title function_">has</span>(item.<span class="property">id</span>)) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(item);</span><br><span class="line">      mapList.<span class="title function_">set</span>(item.<span class="property">id</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="浏览器点击后发生的事件"><a href="#浏览器点击后发生的事件" class="headerlink" title="浏览器点击后发生的事件"></a>浏览器点击后发生的事件</h2><p>事件：</p>
<p>先捕获事件 e.pre</p>
<p>事件行为冒泡 有 e.() xxx 阻止默认行为，错了 是这个 !! e.prebentPopop 冒泡的英文</p>
<p>没有接着了</p>
<h2 id="浏览器事件"><a href="#浏览器事件" class="headerlink" title="浏览器事件"></a>浏览器事件</h2><blockquote>
<p><code>DOM</code>事件流（<code>event flow</code> ）存在三个阶段：事件捕获阶段、处于目标阶段、事件冒泡阶段。</p>
</blockquote>
<h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><blockquote>
<p>利用<code>事件冒泡</code>，把子元素的事件都绑定到父元素上。如果子元素阻止了事件冒泡，那么委托就无法实现</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Let</span> father <span class="variable language_">document</span>.<span class="title function_">queryselector</span>(<span class="string">&#x27;.father&#x27;</span>)</span><br><span class="line">father.<span class="property">onclick</span> <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title class_">Log</span>(e.<span class="property">target</span>.<span class="property">innerHTML</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>一千个元素</p>
<p>只给一个父元素监听点击事件 。事件</p>
<p>ul onClick</p>
<p>li</p>
<p>li</p>
<p>ul</p>
<p>然后根据事件冒泡行为 e.target 来找到具体被点击的事件</p>
<h2 id="箭头函数和-function-的区别"><a href="#箭头函数和-function-的区别" class="headerlink" title="箭头函数和 function 的区别"></a><a href="https://juejin.cn/post/7069943937577779214?searchId=20230921223051AC4414E999DF322A6BF5#heading-5">箭头函数和 function 的区别</a></h2><blockquote>
<p><a href="https://juejin.cn/post/6994378843620556808?searchId=2023092123201435FA64AB005AAD373F6D#heading-2">什么是箭头函数</a></p>
</blockquote>
<ul>
<li><p>箭头函数与普通函数相比，缺少了<code>caller，arguments，prototype</code></p>
</li>
<li><p>声明方式不同</p>
<ul>
<li>声明一个普通函数需要使用关键字<code>function</code>来完成，并且使用<code>function</code>既可以声明成一个<strong>具名函数</strong>也可以声明成一个<strong>匿名函数</strong></li>
<li>声明一个箭头函数则只需要使用箭头就可以，无需使用关键字<code>function</code>，比普通函数声明更简洁。</li>
<li>箭头函数只能声明成<strong>匿名函数</strong>，但可以通过表达式的方式让箭头函数具名</li>
</ul>
</li>
<li><p>this 的指向不同</p>
<blockquote>
<p>对于普通函数来说，内部的<code>this</code>指向函数运行时所在的对象，但是这一点对箭头函数不成立。它没有自己的<code>this</code>对象，内部的<code>this</code>就是定义时上层作用域中的<code>this</code>。也就是说，箭头函数内部的<code>this</code>指向是固定的，相比之下，普通函数的<code>this</code>指向是可变</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;out&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;inner&quot;</span>,</span><br><span class="line">  <span class="attr">say</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;say:&quot;</span>, <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">say2</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;say2:&quot;</span>, <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">person.<span class="title function_">say</span>(); <span class="comment">// say: inner</span></span><br><span class="line">person.<span class="title function_">say2</span>(); <span class="comment">// say2: out</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>箭头函数的 this 永远不会变，call、apply、bind 也无法改变(<code>call、apply、bind</code>核心思想：借用方法)</p>
</li>
<li><p>箭头函数没有原型 prototype</p>
</li>
<li><p>箭头函数不能当成一个构造函数</p>
</li>
<li><p>🧑🏻‍🌾 没有 new.target</p>
</li>
<li><p>🧑🏻‍🌾 <a href="https://juejin.cn/post/6994378843620556808?searchId=2023092123201435FA64AB005AAD373F6D">箭头函数没有自己的 arguments</a></p>
</li>
</ul>
<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a><a href="https://juejin.cn/post/6844903977880928270?searchId=20230921223236C828FB8773AC18382EB1#heading-4">匿名函数</a></h2><h2 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h2><p>CSS：</p>
<p>flex 布局（弹性布局）</p>
<p>父元素： justify-content alig-item display-flex</p>
<p>子元素： flex:1 flex-grow 1 flex -shirk 1 flex-basix 0</p>
<p>数字 比例</p>
<h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><p>BFC：</p>
<p>高度塌陷</p>
<h2 id="重排和重绘"><a href="#重排和重绘" class="headerlink" title="重排和重绘"></a>重排和重绘</h2><p>（重排）回流： 几何尺寸改变改变</p>
<p>重绘：上色，像素点</p>
<h3 id="不触发重排，动画实现有什么方式"><a href="#不触发重排，动画实现有什么方式" class="headerlink" title="不触发重排，动画实现有什么方式"></a>不触发重排，动画实现有什么方式</h3><p>使用：transform</p>
<p>will-change 属性</p>
<p>opacity 和 visibility：hidden</p>
<h2 id="浏览器事件循环"><a href="#浏览器事件循环" class="headerlink" title="浏览器事件循环"></a>浏览器事件循环</h2><p>宏任务和微任务</p>
<h2 id="React-Hook"><a href="#React-Hook" class="headerlink" title="React Hook"></a>React Hook</h2><p>useEffect 的</p>
<p>返回值 组件销毁时触发这个函数</p>
<p>return 里面清除定时器，避免内存泄露</p>
<h2 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h2><p>强缓存和协商缓存，强缓存</p>
<p>强缓存： 看 cache-control： max-age 相对时间 或者 expires 绝对时间。思考一下绝对时间受到客户端时间的影响，</p>
<p>也有种 Etag 不看时间，看哈希值</p>
<p>请求头对应值：if-modify-since 代表着时间</p>
<p>协商缓存： 304</p>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h3><p>当我们需要一个字符串形式的值时，就会进行字符串转换。</p>
<p>比如，<code>alert(value)</code> 将 <code>value</code> 转换为字符串类型，然后显示这个值。</p>
<p>我们也可以显式地调用 <code>String(value)</code> 来将 <code>value</code> 转换为字符串类型：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="literal">true</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> value); <span class="comment">// boolean</span></span><br><span class="line"></span><br><span class="line">value = <span class="title class_">String</span>(value); <span class="comment">// 现在，值是一个字符串形式的 &quot;true&quot;</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> value); <span class="comment">// string</span></span><br></pre></td></tr></table></figure>

<p>字符串转换最明显。<code>false</code> 变成 <code>&quot;false&quot;</code>，<code>null</code> 变成 <code>&quot;null&quot;</code> 等</p>
<h3 id="数字型转换"><a href="#数字型转换" class="headerlink" title="数字型转换"></a>数字型转换</h3><table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">变成……</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>undefined</code></td>
<td align="left"><code>NaN</code></td>
</tr>
<tr>
<td align="left"><code>null</code></td>
<td align="left"><code>0</code></td>
</tr>
<tr>
<td align="left"><code>true/false</code></td>
<td align="left"><code>1</code> &#x2F; <code>0</code></td>
</tr>
<tr>
<td align="left"><code>string</code></td>
<td align="left">去掉首尾空白字符（空格、换行符 <code>\n</code>、制表符 <code>\t</code> 等）后的纯数字字符串中含有的数字。如果剩余字符串为空，则转换结果为 <code>0</code>。否则，将会从剩余字符串中“读取”数字。当类型转换出现 error 时返回 <code>NaN</code>。</td>
</tr>
</tbody></table>
<h3 id="容易出错的"><a href="#容易出错的" class="headerlink" title="容易出错的"></a>容易出错的</h3><ul>
<li>对 <code>undefined</code> 进行数字型转换时，输出结果为 <code>NaN</code>，而非 <code>0</code>。</li>
<li>对 <code>&quot;0&quot;</code> 和只有空格的字符串（比如：<code>&quot; &quot;</code>）进行布尔型转换时，输出结果为 <code>true</code>。every</li>
</ul>
<h2 id="JS-操作浏览器-DOM"><a href="#JS-操作浏览器-DOM" class="headerlink" title="JS 操作浏览器 DOM"></a>JS 操作浏览器 DOM</h2><ul>
<li>使用 <code>document.querySelector</code> 获取一组符合 CSS 选择符的元素快照，类型为 NodeList（此对象是对于文档的实时运行的动态查询）</li>
</ul>
<h2 id="-2"><a href="#-2" class="headerlink" title="-"></a>-</h2><h2 id="New执行的操作"><a href="#New执行的操作" class="headerlink" title="New执行的操作"></a>New执行的操作</h2><p>在 JavaScript 中，<code>new</code> 关键字用于创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。<code>new</code> 关键字执行的操作如下：</p>
<ol>
<li><strong>创建一个新的空对象</strong>：JavaScript 会创建一个新的空对象。</li>
<li><strong>设置原型链</strong>：新创建的对象的 <code>__proto__</code> 属性会被链接到构造函数的 <code>prototype</code> 对象。这意味着新创建的对象可以访问构造函数原型上的属性和方法。</li>
<li>**绑定 <code>this</code>**：在构造函数内部，<code>this</code> 被绑定到新创建的对象。如果构造函数中有对 <code>this</code> 的引用，那么这些引用指向的就是新创建的对象。</li>
<li><strong>执行构造函数内的代码</strong>：构造函数内的代码（通常这些代码用于初始化新创建的对象的属性）被执行。</li>
<li><strong>返回新对象</strong>：如果构造函数没有显式返回一个对象，那么新创建的对象会被隐式返回。如果构造函数返回了一个非对象类型的值，则忽略这个返回值，依然返回新创建的对象。如果构造函数返回了一个新的对象，那么返回这个对象，而忽略刚刚新创建的对象。</li>
</ol>
<p>这些步骤使得 <code>new</code> 关键字在 JavaScript 中成为创建新对象的重要工具。</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;ConardLi&#x27;</span>);</span><br><span class="line">person.<span class="title function_">sayName</span>();  <span class="comment">// 输出：&#x27;ConardLi&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>new Person(&#39;ConardLi&#39;)</code> 创建了一个新的 <code>Person</code> 对象，这个对象的 <code>name</code> 属性被初始化为 <code>&#39;ConardLi&#39;</code>，并且这个对象可以访问 <code>Person.prototype</code> 上的 <code>sayName</code> 方法。</p>
]]></content>
      <categories>
        <category>JavaScript 基础</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6使用手册</title>
    <url>/post/93bcf3e9.html</url>
    <content><![CDATA[<h2 id="我用到的-es6"><a href="#我用到的-es6" class="headerlink" title="我用到的 es6"></a>我用到的 es6</h2><ol>
<li>模板字面量：通过&#96;&#96;标识字符串</li>
<li></li>
</ol>
<h2 id="1-let-和-const"><a href="#1-let-和-const" class="headerlink" title="1.let 和 const"></a>1.let 和 const</h2><h2 id="2-模板字符串"><a href="#2-模板字符串" class="headerlink" title="2.模板字符串"></a>2.模板字符串</h2><h3 id="1-模板字符串"><a href="#1-模板字符串" class="headerlink" title="1.模板字符串"></a>1.模板字符串</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串拼接 bad</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">&quot;this is a&quot;</span> + content;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模板字符串 good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">`this is a <span class="subst">$&#123;content&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-标签模板优化书写方式"><a href="#2-标签模板优化书写方式" class="headerlink" title="2.标签模板优化书写方式"></a>2.标签模板优化书写方式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = oneLine<span class="string">`</span></span><br><span class="line"><span class="string">	www.taobao.com/example/index.html</span></span><br><span class="line"><span class="string">	?foo=<span class="subst">$&#123;foo&#125;</span></span></span><br><span class="line"><span class="string">	&amp;bar=<span class="subst">$&#123;bar&#125;</span></span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url); <span class="comment">// www.taobao.com/example/index.html?foo=foo&amp;bar=bar</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript 基础</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/post/f8e09374.html</url>
    <content><![CDATA[<h2 id="渐进式-JavaScript-框架"><a href="#渐进式-JavaScript-框架" class="headerlink" title="渐进式 JavaScript 框架"></a>渐进式 JavaScript 框架</h2><h2 id="使用过程中遇到的问题"><a href="#使用过程中遇到的问题" class="headerlink" title="使用过程中遇到的问题"></a>使用过程中遇到的问题</h2><h3 id="属性带不带冒号"><a href="#属性带不带冒号" class="headerlink" title="属性带不带冒号"></a>属性带不带冒号</h3><p>冒号实际上是<code>v-bind:attribute</code>的缩写</p>
<p><code>v-bind</code>能够动态的绑定一个或多个 attribute，也可以是组件的 prop</p>
<h3 id="模板引用"><a href="#模板引用" class="headerlink" title="模板引用"></a>模板引用</h3><p>使用时需要加<code>value</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xxxx.<span class="property">value</span>.<span class="property">validate</span>;</span><br></pre></td></tr></table></figure>

<h3 id="插槽的使用（slot）"><a href="#插槽的使用（slot）" class="headerlink" title="插槽的使用（slot）"></a>插槽的使用（slot）</h3><p>示例：</p>
<blockquote>
<p>FancyList.vue</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  const props = defineProps([&#x27;api-url&#x27;, &#x27;per-page&#x27;])</span><br><span class="line"></span><br><span class="line">  const items = ref([])</span><br><span class="line"></span><br><span class="line">  // mock remote data fetching</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    items.value = [</span><br><span class="line">      &#123; body: &#x27;Scoped Slots Guide&#x27;, username: &#x27;Evan You&#x27;, likes: 20 &#125;,</span><br><span class="line">      &#123; body: &#x27;Vue Tutorial&#x27;, username: &#x27;Natalia Tepluhina&#x27;, likes: 10 &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-if=&quot;!items.length&quot;&gt;</span><br><span class="line">      Loading...</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class="line">      &lt;slot name=&quot;item&quot; v-bind=&quot;item&quot;/&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  ul &#123;</span><br><span class="line">    list-style-type: none;</span><br><span class="line">    padding: 5px;</span><br><span class="line">    background: linear-gradient(315deg, #42d392 25%, #647eff);</span><br><span class="line">  &#125;</span><br><span class="line">  li &#123;</span><br><span class="line">    padding: 5px 20px;</span><br><span class="line">    margin: 10px;</span><br><span class="line">    background: #fff;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
</blockquote>
<h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>如何实现双向绑定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;testValue&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;testValue = $event.target.value&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--$event  访问原始的 DOM 事件 --&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>WELCOME TO MY BLOG 🍾 🪅 🥂 🎉</title>
    <url>/post/4a17b156.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JS模块的导入导出</title>
    <url>/post/3e90cfd3.html</url>
    <content><![CDATA[<h2 id="JS-模块的导入导出"><a href="#JS-模块的导入导出" class="headerlink" title="JS 模块的导入导出"></a>JS 模块的导入导出</h2><p>导入导出模块？ 要不要加{}？ 如何导出模块？路径中需不需要写文件后缀？</p>
<h3 id="commonjs"><a href="#commonjs" class="headerlink" title="commonjs"></a>commonjs</h3><p><code>nodejs </code> 借鉴了 <code>Commonjs</code> 的 Module ，实现了良好的模块化管理</p>
<p><strong>特点</strong></p>
<ul>
<li><p>在 <code>commonjs</code> 中每一个 js 文件都是一个单独的模块，我们可以称之为 module；</p>
</li>
<li><p>该模块中，包含 CommonJS 规范的核心变量: exports、module.exports、require；</p>
</li>
</ul>
<h3 id="Es-Module"><a href="#Es-Module" class="headerlink" title="Es Module"></a>Es Module</h3><p>export 与 export default 的区别</p>
<ul>
<li>export 与 export default 均可用于导出常量、函数、文件、模块等</li>
<li>可以在其它文件或模块中通过 import+(常量 | 函数 | 文件 | 模块)名的方式，将其导入，以便能够对其进行使用</li>
<li>export default 后面不能跟 const 或 let 的关键词</li>
<li>export、import 可以有多个，export default 仅有一个。</li>
<li>通过 export 方式导出，在导入时要加 { }，export default 则不需要</li>
<li>export<code>具名</code>导出 xxx ，export default<code>匿名</code>。区别在于导入的时候，export 需要<code>一样</code>的名称才能匹配，后者无论取什么名都可以。</li>
<li>模块化管理中一个文件就是一个模块，export 可以导出多个方法和变量，export default 只能导出当前模块，一个 js 文件中只支持出现一个</li>
</ul>
]]></content>
      <tags>
        <tag>ES Moudle</tag>
        <tag>CommonJS</tag>
        <tag>模块化</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSocket</title>
    <url>/post/c793072c.html</url>
    <content><![CDATA[<h1 id="Web-SOCKET"><a href="#Web-SOCKET" class="headerlink" title="Web SOCKET"></a>Web SOCKET</h1><h2 id="websocket-介绍"><a href="#websocket-介绍" class="headerlink" title="websocket 介绍"></a>websocket 介绍</h2><p>web socket 是一种全双工通讯的网络技术,属于应用层协议,基于 TCP 传输协议,并复用了 HTTP 的握手通道</p>
<p>是一种长连接,不需要频繁的链接断开</p>
<h3 id="websocket-数据帧格式"><a href="#websocket-数据帧格式" class="headerlink" title="websocket 数据帧格式"></a>websocket 数据帧格式</h3><blockquote>
<p>单位是 bit 如 FIN RSV 都占据 1bit opcode 占据 4bit</p>
</blockquote>
<p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/readme/202309061628568.png" alt="image-20230906162803200"></p>
<ul>
<li><p>FIN 1BIT 标记数据是否发送到最后一位</p>
<p>如果是消息的最后一个分片，则返回的是 1 否则返回 0</p>
</li>
<li><p>OPCODE 4BIT</p>
<p>&#x3D;&#x3D;9 10 用于心跳监测&#x3D;&#x3D;</p>
<p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/readme/202309062225696.png" alt="image-20230906222522624"></p>
</li>
<li><p>MASK(掩码)</p>
<ul>
<li>客户端发送消息到服务端 掩码为 1</li>
<li>服务端发送消息到客户端 掩码为 0</li>
</ul>
</li>
<li><p>PAYLOAD（数据载荷长度）</p>
<p>说明传输的数据的字节 根据 Payload length 的长度 判断后续字节的作用</p>
<p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/readme/202309071030759.png" alt="image-20230907103055654"></p>
<p><code>Buffer</code>字节数组</p>
<ul>
<li><p>大端序：高位放在低地址先读，按顺序读取</p>
</li>
<li><p>小端序：</p>
<p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/readme/202309071121351.png" alt="image-20230907112108233"></p>
<p><strong>输出为 256 1</strong></p>
</li>
</ul>
</li>
<li><p>Masking-Key</p>
<p>0 或 4 字节(32 位)所有从客户端传送到服务端的数据帧，数据载荷都进行了掩<br>码操作，Mask 为 1，且携带了 4 字节的 Masking-key。如果 Mask 为 0，则没有 Masking-key。<br>载荷数的长度，不包括 mask key 的长度</p>
</li>
</ul>
<h2 id="websocket-建立链接过程"><a href="#websocket-建立链接过程" class="headerlink" title="websocket 建立链接过程"></a>websocket 建立链接过程</h2><p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/readme/202309062208820.png" alt="	"></p>
<p><strong>客户端请求头及请求相应状态</strong>：</p>
<p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/readme/202309062212586.png" alt="image-20230906221244548"></p>
<p><strong>服务端响应</strong></p>
<p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/readme/202309062214054.png" alt="image-20230906221421998"></p>
<p>其中请求中的<code>Sec-Websocket-Key</code>用于验证链接是否合法</p>
<p>状态码中的 101 代表协议切换</p>
<h2 id="客户端发送消息到客户端"><a href="#客户端发送消息到客户端" class="headerlink" title="客户端发送消息到客户端"></a>客户端发送消息到客户端</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><blockquote>
<p>客户端代码</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;send()&quot;</span>&gt;</span>send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> text = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;text&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 在浏览器链接服务器</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> soket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://localhost:8889&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 当链接打开或建立后，触发回调</span></span></span><br><span class="line"><span class="language-javascript">      soket.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        soket.<span class="title function_">send</span>(<span class="string">&quot;hello server&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 服务器端给客户端发送消息时 可以通过soket.onmessage接受 存储于event中</span></span></span><br><span class="line"><span class="language-javascript">      soket.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// soket.send(event.data);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">send</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> value = text.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        text.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        soket.<span class="title function_">send</span>(value);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>服务端代码</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Server</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;ws&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> wsServer = <span class="keyword">new</span> <span class="title class_">Server</span>(&#123; <span class="attr">port</span>: <span class="number">8889</span> &#125;);</span><br><span class="line"><span class="comment">//wsServer 服务器</span></span><br><span class="line"><span class="comment">//socket 套接字 类似于打电话的手机</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;connection&quot;监听客户端过来的链接</span></span><br><span class="line">wsServer.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//“message&quot;监听当前链接的客户端发来的消息</span></span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">toLocaleString</span>());</span><br><span class="line">    socket.<span class="title function_">send</span>(message);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol>
<li><code>let soket = new WebSocket(&quot;ws://localhost:8889&quot;) </code>浏览器链接服务器</li>
<li><code>        soket.send(&quot;hello server&quot;);</code>客户端向服务器发消息 “hello server”</li>
<li><code>socket.on(&quot;message&quot;</code>)服务端监听到消息并触发回调，向客户端发送消息</li>
<li><code>soket.onmessage</code>客户端监听到服务端的相应，触发回调打印</li>
</ol>
]]></content>
      <categories>
        <category>网络通信</category>
      </categories>
      <tags>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>css基础</title>
    <url>/post/eda1a9a9.html</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>css</tag>
        <tag>样式</tag>
      </tags>
  </entry>
  <entry>
    <title>css布局</title>
    <url>/post/5a252ba9.html</url>
    <content><![CDATA[<h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p> <strong>block</strong> （块元素）:</p>
<ul>
<li>块元素会在页面中独占行(自上向下垂直排列)</li>
<li>默认宽度是父元素的全部(会把父元素撑满)</li>
<li>默认高度是被内容撑开(子元素)</li>
</ul>
<p>一般用于其他标签的容器,常用的块级元素包括 div p h1-h6 hr ul ol li dl dd dt form</p>
<p> <strong>inline</strong> （行内元素）:</p>
<ul>
<li>行内元素不会独占页面的一行， 只占自身的大小</li>
<li>行内元素在页面中左向右水平排列，如果一行之中不能容纳下所有的行内元则元素 会换到第二行继续自左向右排列 (书写习惯一致)</li>
<li>行内元素的默认宽度和高度都是被内容撑开。</li>
</ul>
<p>常用的行内元素包括span a</p>
<p>行内元素的盒模型</p>
<ul>
<li>行内元素不支持设置宽度和高度</li>
<li>行内元素可以设置padding,但是垂直方向padding不会影响页面的布局 ;</li>
<li>行内元素可以设置border.垂直方向的border不会影响页面的布局;</li>
<li>行内元素可以设置margin,垂直方向的margin不会影响布局</li>
</ul>
<p> <strong>inline-block</strong> （行内元素）:支持宽高，自左向右排列,不独占一行<br>,常用的行内块元素包括img  textarea  input</p>
<p><strong>none</strong>  :<br>一些特殊元素的默认 display 值是none，例如script, display:none被 JavaScript 用来在不删除元素的情况下隐藏或显示元素。<br>它和visibility属性不一样。把display设置成 none元素不会占据它本来应该显示的空间，但是设置成 visibility: hidden;还会占据空间。</p>
<h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><p><strong>static</strong> : 静态,默认值,文档流</p>
<p><strong>relative</strong> :<br>相对定位不脱离文档流,对周围元素的位置没有任何影响<br>如果相对定位不写偏移属性或者偏移量为0,效果与没写定位一样<br>相对自已原来位置做偏移原来的位子不会被占着(不脱离文档流)<br>使用场合<br>①类似于margin(margin挤开,相对定位覆盖其他元素),做自身位置的微调<br>②作为绝对定位的祖先级已定位属性(子绝父相,此处多不写偏移属性)<br>偏移属性的特点: 上下冲突,以top为准 ; 左右冲突,以left为准</p>
<p><strong>fixed</strong> :<br>将元素固定在页面上某个位置,不会随着滚动条滚动,变化位置</p>
<p>一直固定在可视区域  , 一个固定定位（position属性的值为fixed）元素会相对于视窗来定位，这意味着即便页面滚动，它还是会停留在相同的位置。和relative一样，top、right、bottom和left属性都可用。一个固定定位元素不会保留它原本在页面应有的空隙，即之后添加的元素会占用他之前的位置。</p>
<p><strong>absolute</strong> :<br>绝对定位脱离文档流<br>1.没有已定位的祖先级元素,相对body左上角偏移</p>
<p>2.相对于,离自己最近的,已定位的,祖先级元素的左上角做偏移</p>
<p>注意:最适合把祖先级变成已定位元素的样式,relative</p>
<h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><p>通过浮动可以使一个元素 向其父元素的左侧或右侧移动 使用float 属性来设置于元素的浮动<br>可选值: none 默认值，元素不浮动<br>left 元素向左浮动<br>right 元素向右浮动<br>注意，元素设置浮动以后，水平布局的等式便不需要强制成立<br>元素设置浮动以后，会完全从文档流中脱离，不再占用文档流的位置， 所以元素 下边的还在文档流中的元素会自动向上移动</p>
<p>浮动的特点:</p>
<ol>
<li>浮动元素会完全脱离文档流，不再占据文档流中的位置</li>
<li>设置浮动以后元素会向父元素的左侧或右侧移动，</li>
<li>浮动元素默认不会从父元素中移出</li>
<li>浮动元素向左或向右移动时，不会超过它前边的其他浮动元素</li>
<li>如果浮动元素的上边是一个没有浮动的块元素，则浮动元素无法上移</li>
<li>浮动元素不会超过它上边的浮动的兄弟元素，最多最多就是和它一样高</li>
</ol>
<p>浮动目前来讲它的主要作用就是让页面中的元素可以水平排列，<br>通过浮动可以制作一些水平方向的布局<br>浮动元素不会盖住文字，文字会自动环绕在浮动元素的周围，<br>所以我们可以利用浮动来设置文字环绕图片的效果<br>元素设置浮动以后，将会从文档流中脱离，从文档流中脱离后，元素的一些特点也会发变化<br>脱离文档流的特点:</p>
<p>块元素:</p>
<ul>
<li>块元素不在独占页面的一行</li>
<li>脱离文档流以后，块元素的宽度和高度默认都被内容撑开</li>
</ul>
<p>行内元素:</p>
<ul>
<li>行内元素脱离文档流以后会变成块元素（可设置宽高），特点和块元素一样</li>
<li>脱离文档流以后，不需要再区分块和行内了</li>
</ul>
<p><strong>clear</strong> :<br>float属性被用于控制浮动。即元素浮动之后，周围的元素会重新排列，为了避免这种情况，使用clear属性，clear属性指定元素两侧不能出现浮动元素。</p>
<p><strong>清除浮动</strong><br>在一个div中放一张图片，有时候图片会超出div的范围，这个时候我们需要这样做，给div加上此属性</p>
<p><code>.clearfix &#123;   overflow: auto; &#125;</code></p>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>容器的属性</p>
<ul>
<li>flex-direction（主轴方向）</li>
<li>flex-wrap（是否换行）</li>
<li>flex-flow（主轴方向与是否换行的简写形式）</li>
<li>justify-content（在长度上的排列方式）</li>
<li>align-items（在宽度上的排列方式）</li>
<li>align-content（行间距）</li>
</ul>
<p><strong>flex-direction</strong> :<br>属性决定主轴的方向（即项目的排列方向）<br>, 可以理解为元素排列的起点在哪里，沿哪个方向排列。把显示屏比喻为一张纸的话，该属性决定了第一个字在哪个角开始写以及第一行字写的方向</p>
<p>row（默认值）：主轴为水平方向，起点在左端。</p>
<p>row-reverse：主轴为水平方向，起点在右端。</p>
<p>column：主轴为垂直方向，起点在上沿。</p>
<p>column-reverse：主轴为垂直方向，起点在下沿。</p>
<p><strong>flex-wrap</strong> :<br>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行, 把显示屏比喻为一张纸的话，该属性决定了一行字写完以后换行不换行（假设是字可以一直缩小，不换行且继续新增的话，字会背挤的越来越小）</p>
<p>nowrap（默认）：不换行。</p>
<p>wrap：换行，第一行在上方。</p>
<p>wrap-reverse：换行，第一行在下方。</p>
<p><strong>flex-flow</strong></p>
<p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p>
<p><strong>justify-content</strong> :<br>justify-content属性定义了项目在主轴上的对齐方式，可以理解为在显示屏的长度这个方向上元素的排列方式 , 把显示屏比喻为一张纸的话，该属性决定了在这一行的字的排列方式</p>
<p>flex-start（默认值）：左对齐</p>
<p>flex-end：右对齐</p>
<p>center： 居中</p>
<p>space-between：两端对齐，项目之间的间隔都相等。</p>
<p>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</p>
<p><strong>align-items</strong> :<br>align-items属性定义项目在交叉轴上如何对齐<br>可以理解为在显示屏的宽度上元素的排列方式，把显示屏比喻为一张纸的话，该属性决定第一行字距离纸的边距距离</p>
<p>flex-start：交叉轴的起点对齐。</p>
<p>flex-end：交叉轴的终点对齐。</p>
<p>center：交叉轴的中点对齐。</p>
<p>baseline: 项目的第一行文字的基线对齐。</p>
<p>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</p>
<p><strong>align-content</strong> :<br>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用, 可以理解为行与行之间的间隔距离，把显示屏比喻为一张纸的话，该属性决定第行间距</p>
<p>flex-start：与交叉轴的起点对齐。</p>
<p>flex-end：与交叉轴的终点对齐。</p>
<p>center：与交叉轴的中点对齐。</p>
<p>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</p>
<p>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</p>
<p>stretch（默认值）：轴线占满整个交叉轴。（平均铺满显示器）</p>
<p>作者：Dev_<br>链接：<a href="https://juejin.cn/post/7184450056206942245">https://juejin.cn/post/7184450056206942245</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>java学习</title>
    <url>/post/c2adefc4.html</url>
    <content><![CDATA[<h2 id="JAVA基础"><a href="#JAVA基础" class="headerlink" title="JAVA基础"></a>JAVA基础</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; fruits = Arrays.asList(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Grapes&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Arrays.asList(&quot;Apple&quot;, &quot;Banana&quot;, &quot;Orange&quot;, &quot;Grapes&quot;)</code> 创建了一个包含字符串的固定大小的列表，其中包含了四种水果，即苹果（Apple）、香蕉（Banana）、橙子（Orange）和葡萄（Grapes）。</li>
<li><code>List&lt;String&gt; fruits</code> 声明了一个泛型列表，其中的元素类型是字符串（<code>String</code>）。</li>
</ul>
<h2 id="VO和DTO是什么"><a href="#VO和DTO是什么" class="headerlink" title="VO和DTO是什么"></a>VO和DTO是什么</h2><p>一句话总结 </p>
<p>VO是返回给前端用于展示的 </p>
<p>DTO是不同层间传输的数据对象（前端传来的数据可能是DTO，也可能后端处理时查完表组成一个DTO再提取出VO返回给前端）</p>
<p>DTO和VO是Java中常用的数据传输对象，它们的主要区别在于它们的使用场景和目的。</p>
<p>DTO（Data Transfer Object）是用于在不同层之间传输数据的对象，通常用于将数据库中的数据转换为前端需要的格式，方便前后端之间的数据交互。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DTO示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">// 省略getter和setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>VO（Value Object）则是用于展示用的数据，不管展示方式是网页、客户端还是APP，只要是这个东西是让人看到的，这就叫VO。VO主要的存在形式就是js里面的对象（也可以简单理解成json）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// VO示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserVO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">// 省略getter和setter方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>VO和DTO的区别主要有两个方面：一个是字段不一样，VO根据需要会删减一些字段；另一个是值不一样，VO会根据需要对DTO中的值进行展示业务的解释。在Spring Boot中，DTO和VO通常用于在Controller层和Service层之间传输数据。</p>
<p>下面是一个使用DTO和VO的示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Controller层</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;UserVO&gt; <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> UserDTO userDTO)</span> &#123;</span><br><span class="line">        <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> userService.createUser(userDTO);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(userVO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Service层</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> UserVO <span class="title function_">createUser</span><span class="params">(UserDTO userDTO)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(userDTO.getName());</span><br><span class="line">        user.setEmail(userDTO.getEmail());</span><br><span class="line">        user.setPassword(userDTO.getPassword());</span><br><span class="line">        userRepository.save(user);</span><br><span class="line"></span><br><span class="line">        <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserVO</span>();</span><br><span class="line">        userVO.setName(user.getName());</span><br><span class="line">        userVO.setEmail(user.getEmail());</span><br><span class="line">        <span class="keyword">return</span> userVO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Spring-Boot项目"><a href="#Spring-Boot项目" class="headerlink" title="Spring Boot项目"></a>Spring Boot项目</h2><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3>]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>this指向</title>
    <url>/post/74520f03.html</url>
    <content><![CDATA[<h2 id="不同情况下的this指向"><a href="#不同情况下的this指向" class="headerlink" title="不同情况下的this指向"></a>不同情况下的<code>this</code>指向</h2><p>理解函数中的 <code>this</code> 关键字可能需要一些JavaScript中this的上下文的背景知识。在JavaScript中，<code>this</code> 的值是在函数被调用时确定的，并取决于函数的调用方式。</p>
<p>当你定义一个函数时，它并不与任何特定的对象绑定。然而，当函数被调用时，JavaScript会根据调用方式来确定 <code>this</code> 的值。有几种情况下 <code>this</code> 的值会有所不同：</p>
<ol>
<li><p><strong>全局上下文：</strong> 当函数在全局范围内被调用时，<code>this</code> 指向全局对象（在浏览器环境中通常是 <code>window</code>）。</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">globalFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 在浏览器中可能指向 window 对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">globalFunction</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>作为对象方法：</strong> 当函数作为对象的方法被调用时，<code>this</code> 指向调用该函数的对象。</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="title function_">method</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 指向 obj 对象</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">method</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>通过构造函数调用：</strong> 当函数被用作构造函数（通过 <code>new</code> 关键字调用）时，<code>this</code> 指向新创建的对象实例。</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">property</span> = <span class="string">&#x27;value&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 指向新创建的对象实例</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title class_">Constructor</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用 <code>call</code>、<code>apply</code> 或 <code>bind</code> 显式指定 <code>this</code>：</strong> 这些方法允许你显式地指定函数在调用时的 <code>this</code> 值。</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">explicitContext</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> explicitObject = &#123; <span class="attr">name</span>: <span class="string">&#x27;Explicit&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line">explicitContext.<span class="title function_">call</span>(explicitObject); <span class="comment">// 使用 call 显式指定 this</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>现在，回到 <code>Array.from</code> 的 <code>thisArg</code> 参数。在使用 <code>Array.from</code> 时，你可以通过 <code>thisArg</code> 参数指定在映射函数执行时的 <code>this</code> 上下文。这对于确保在映射函数中访问特定的对象属性或方法非常有用，因为在默认情况下，函数内部的 <code>this</code> 可能会指向不同的上下文。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> contextObject = &#123;</span><br><span class="line">  <span class="attr">multiplier</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="title function_">mapFunction</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="variable language_">this</span>.<span class="property">multiplier</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arrayLike = &#123; <span class="number">0</span>: <span class="number">1</span>, <span class="number">1</span>: <span class="number">2</span>, <span class="number">2</span>: <span class="number">3</span>, <span class="attr">length</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newArray = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike, contextObject.<span class="property">mapFunction</span>, contextObject);</span><br><span class="line"><span class="comment">// newArray is now [2, 4, 6]</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>contextObject.mapFunction</code> 是映射函数，通过将 <code>contextObject</code> 作为 <code>thisArg</code> 参数传递给 <code>Array.from</code>，确保映射函数中的 <code>this</code> 指向了 <code>contextObject</code>。这样，映射函数就可以访问 <code>contextObject</code> 的属性 <code>multiplier</code>。</p>
<ul>
<li>在 JavaScript 中，函数中的 <code>this</code> 关键字的值取决于函数的调用方式。如果一个函数作为一个对象的方法被调用，那么 <code>this</code> 将指向那个对象。如果一个函数不是作为一个对象的方法被调用，那么 <code>this</code> 的值取决于是否在严格模式下。在严格模式下，<code>this</code> 将是 <code>undefined</code>；在非严格模式下，<code>this</code> 将是全局对象（在浏览器中是 <code>window</code> 对象）。</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript 深入学习</category>
      </categories>
  </entry>
  <entry>
    <title>函数闭包</title>
    <url>/post/87bab44d.html</url>
    <content><![CDATA[<h2 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h2><p>有权访问另一个函数作用域中的变量的函数，就是闭包。</p>
<p>这是一种闭包</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">animal</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getName</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">animal</span>();</span><br></pre></td></tr></table></figure>

<p>这也是一种闭包</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>name 定义在全局作用域中，getName 在内部输出找不到自己定义的值，因此向外寻找，输出 getName，是一个隐性的闭包。</p>
<h3 id="一个例子记住"><a href="#一个例子记住" class="headerlink" title="一个例子记住"></a>一个例子记住</h3><blockquote>
<p>函数在创建时，会保存所有父变量对象到其中的[scope]中。函数激活时，会将自身的活动对象添加到作用链的前端</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  data[i] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// data中的每个元素的scope均为[global.vo]</span></span><br><span class="line"></span><br><span class="line">data[<span class="number">0</span>]();</span><br><span class="line">data[<span class="number">1</span>]();</span><br><span class="line">data[<span class="number">2</span>]();</span><br></pre></td></tr></table></figure>

<p>输出均为3</p>
<p>当执行到 data[0] 函数之前，此时全局上下文的 VO 为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">globalContext = &#123;</span><br><span class="line">    <span class="attr">VO</span>: &#123;</span><br><span class="line">        <span class="attr">data</span>: [...],</span><br><span class="line">        <span class="attr">i</span>: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当执行 data[0] 函数的时候，data[0] 函数的作用域链为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data[<span class="number">0</span>]<span class="title class_">Context</span> = &#123;</span><br><span class="line">    <span class="title class_">Scope</span>: [<span class="variable constant_">AO</span>, globalContext.<span class="property">VO</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>data[0]Context 的 AO 并没有 i 值，所以会从 globalContext.VO 中查找，i 为 3，所以打印的结果就是 3。</p>
<p>data[1] 和 data[2] 是一样的道理。</p>
<p>所以让我们改成闭包看看：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"><span class="comment">// 此处需注意 需要将i传递给匿名函数 如果不进行传递 匿名函数的ao中就不会有i这个变量 最后就会去全局变量对象中寻找i</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  data[i] = (<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// data中的每个元素的scope均为[匿名函数.ao,global.vo]</span></span><br><span class="line"></span><br><span class="line">data[<span class="number">0</span>]();</span><br><span class="line">data[<span class="number">1</span>]();</span><br><span class="line">data[<span class="number">2</span>]();</span><br></pre></td></tr></table></figure>



<p>当执行到 data[0] 函数之前，此时全局上下文的 VO 为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">globalContext = &#123;</span><br><span class="line">    VO: &#123;</span><br><span class="line">        data: [...],</span><br><span class="line">        i: 3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>跟没改之前一模一样。</p>
<p>当执行 data[0] 函数的时候，data[0] 函数的作用域链发生了改变：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data[0]Context = &#123;</span><br><span class="line">    Scope: [AO, 匿名函数Context.AO globalContext.VO]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>匿名函数执行上下文的AO为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>data[0]Context 的 AO 并没有 i 值，所以会沿着作用域链从匿名函数 Context.AO 中查找，这时候就会找 i 为 0，找到了就不会往 globalContext.VO 中查找了，即使 globalContext.VO 也有 i 的值(值为3)，所以打印的结果就是0。</p>
<p>data[1] 和 data[2] 是一样的道理。</p>
<p>文章参考<a href="https://github.com/mqyqingfeng/Blog/issues/9%EF%BC%8C%E5%AF%B9%E5%85%B6%E8%BF%9B%E8%A1%8C%E4%BA%86%E6%B3%A8%E9%87%8A%E6%96%B9%E4%BE%BF%E5%AD%A6%E4%B9%A0">https://github.com/mqyqingfeng/Blog/issues/9，对其进行了注释方便学习</a></p>
]]></content>
      <categories>
        <category>JavaScript 深入学习</category>
      </categories>
      <tags>
        <tag>closure</tag>
      </tags>
  </entry>
  <entry>
    <title>原型及原型链</title>
    <url>/post/7be7e7cb.html</url>
    <content><![CDATA[<h1 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h1><h2 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h2><p>我们先使用构造函数创建一个对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;ameee9&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// ameee9</span></span><br></pre></td></tr></table></figure>

<h2 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h2><p>每个函数都有一个 prototype 属性，就是我们经常在各种例子中看到的那个 prototype ，比如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">// prototype是函数才会有的属性</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;ameee9&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>); <span class="comment">// ameee9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="property">name</span>); <span class="comment">// ame ee9</span></span><br></pre></td></tr></table></figure>

<p>函数的 <code>prototype 属性</code>指向了一个对象，这个对象正是调用该构造函数而创建的<strong>实例</strong>的原型，也就是这个例子中的 person1 和 person2 的原型。</p>
<p>每一个 JavaScript 对象(null 除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型”继承”属性。</p>
<p>构造函数和实例原型之间的关系：</p>
<p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/readme/202309202302859.png" alt="1"></p>
<p>在这张图中我们用 Object.prototype 表示实例原型。</p>
<h2 id="proto"><a href="#proto" class="headerlink" title="_proto_"></a><code>_proto_</code></h2><p>这是每一个 JavaScript 对象(除了 null )都具有的一个属性，叫<code>_proto_</code>，这个属性会指向该对象的原型。</p>
<p>为了证明这一点,我们可以在火狐或者谷歌中输入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="comment">// 使用 __proto__ 是有争议且不被鼓励的。它的存在和确切行为仅作为遗留特性被标准化，以确保 Web 兼容性，但它存在一些安全问题和隐患。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(person) === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>新的关系图：</p>
<p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/readme/202309202311901.png" alt="2"></p>
<p>既然实例对象和构造函数都可以指向原型，那么原型是否有属性指向构造函数或者实例呢？</p>
<h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><p>指向实例倒是没有，因为一个构造函数可以生成多个实例，但是原型指向构造函数倒是有的，这就要讲到第三个属性：constructor，每个原型都有一个 constructor 属性指向关联的构造函数。</p>
<p>为了验证这一点，我们可以尝试：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>所以再更新下关系图：</p>
<p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/readme/202309202314771.png" alt="2"></p>
<p>综上可以得到：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">__proto__</span> == <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> == <span class="title class_">Person</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>了解了构造函数、实例原型、和实例之间的关系，接下来我们讲讲实例和原型的关系：</p>
<h2 id="实例与原型"><a href="#实例与原型" class="headerlink" title="实例与原型"></a>实例与原型</h2><p>当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。</p>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;prototype&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;ameee9&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// ameee9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// prototype</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，我们给实例对象 person 添加了 name 属性，当我们打印 person.name 的时候，结果自然为 ameee9。</p>
<p>但是当我们删除了 person 的 name 属性时，读取 person.name，从 person 对象中找不到 name 属性就会从 person 的原型也就是 person.<code>__proto__</code> ，也就是 Person.prototype 中查找，幸运的是我们找到了 name 属性，结果为 prototype</p>
<p>但是万一还没有找到呢？原型的原型又是什么呢？</p>
<h2 id="原型的原型"><a href="#原型的原型" class="headerlink" title="原型的原型"></a>原型的原型</h2><p>原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;ameee9&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>); <span class="comment">// ameee9</span></span><br></pre></td></tr></table></figure>

<p>其实原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 <strong>_ proto _</strong> 指向构造函数的 prototype ，所以我们再更新下关系图：</p>
<p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/readme/202309202336407.png" alt="3"></p>
<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>那 Object.prototype 的原型呢？</p>
<p>null，我们可以打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(Object.prototype.__proto__ === null) // true</span><br></pre></td></tr></table></figure>

<blockquote>
<p>null 表示“没有对象”，即该处不应该有值。</p>
</blockquote>
<p>所以 Object.prototype.<strong>proto</strong> 的值为 null 跟 Object.prototype 没有原型，其实表达了一个意思。</p>
<p>所以查找属性的时候查到 Object.prototype 就可以停止查找了。</p>
<p>最后一张关系图也可以更新为：</p>
<p><a href="https://camo.githubusercontent.com/9a69b0f03116884e80cf566f8542cf014a4dd043fce6ce030d615040461f4e5a/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f6d717971696e6766656e672f426c6f672f496d616765732f70726f746f74797065352e706e67"><img src="https://camo.githubusercontent.com/9a69b0f03116884e80cf566f8542cf014a4dd043fce6ce030d615040461f4e5a/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f6d717971696e6766656e672f426c6f672f496d616765732f70726f746f74797065352e706e67" alt="原型链示意图"></a></p>
<p>顺便还要说一下，图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="constructor"><a href="#constructor" class="headerlink" title="constructor"></a>constructor</h3><p>首先是 constructor 属性，我们看个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">constructor</span> === <span class="title class_">Person</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>当获取 person.constructor 时，其实 person 中并没有 constructor 属性,当不能读取到 constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性，所以：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">person.<span class="property">constructor</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>来自 <a href="https://github.com/mqyqingfeng/Blog/issues/2">JavaScript 深入之从原型到原型链</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript 深入学习</category>
      </categories>
      <tags>
        <tag>原型链</tag>
      </tags>
  </entry>
  <entry>
    <title>学习记录</title>
    <url>/post/8ad1a2bc.html</url>
    <content><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="网络请求的过程"><a href="#网络请求的过程" class="headerlink" title="网络请求的过程"></a>网络请求的过程</h3><ol>
<li><a href="#%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90">域名解析（DNS 服务器）</a></li>
<li><strong>TCP 三次握手 （自行复述一遍）</strong></li>
<li><strong>HTTP 发送请求</strong></li>
<li><strong>服务器处理并返回 HTTP 报文</strong></li>
<li><a href="#%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90">浏览器解析</a></li>
</ol>
<h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><ul>
<li><a href="https://juejin.cn/post/6935232082482298911">浏览器的主要进程</a></li>
<li><a href="#%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98">浏览器缓存</a></li>
</ul>
<h3 id="相关内容详情"><a href="#相关内容详情" class="headerlink" title="相关内容详情"></a>相关内容详情</h3><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a><strong>域名解析</strong></h3><ul>
<li><strong>递归&#x2F;迭代查询 ？</strong></li>
<li><strong>DNS 优化（多级缓存，负载均衡）</strong></li>
<li><strong>网络模型</strong></li>
</ul>
<h3 id="浏览器解析"><a href="#浏览器解析" class="headerlink" title="浏览器解析"></a><strong>浏览器解析</strong></h3><h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a><strong>浏览器缓存</strong></h3><p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/readme/202312171207005.png" alt="image-20231217120649227"></p>
<ul>
<li><p><strong>强缓存（Expires&#x2F;Cache-Control），响应头中有 cache-control 或 expires 字段，代表该资源是强缓存</strong></p>
<blockquote>
<p><strong>向浏览器缓存查找该请求结果，根据该结果的缓存规则来确定是否使用该缓存结果的过程</strong></p>
</blockquote>
<p><strong>Cache-Control 优先级大于 Expires</strong><br><strong>为什么使用 Cache-Control：Expires 根据本地时间判断，可能被修改</strong></p>
</li>
<li><p><strong>协商缓存（Last-Modified&#x2F;Etag）</strong></p>
<blockquote>
<p><strong>（触发条件）</strong></p>
<p><strong>1、Cache-Control 的值为 no-cache （协商缓存）</strong></p>
<p><strong>2、Cache-Control: max-age&#x3D;0</strong></p>
</blockquote>
<p><strong>为什么使用 Etag：1.文件修改频繁 1s 内修改 n 次 2.周期性更改但内容不变</strong></p>
</li>
<li><p><strong>缓存位置</strong></p>
</li>
</ul>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><ul>
<li>**标准盒模型：只包含 **<code>content</code> 。</li>
<li><strong>IE（替代）盒模型：</strong><code>content + padding + border</code></li>
</ul>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul>
<li><p><strong>基本选择器：</strong></p>
<ul>
<li>通配符选择器 <code>*</code>：匹配所有元素。</li>
<li>元素选择器：通过元素的标签名进行选择，例如 <code>div</code>、<code>p</code>、<code>span</code> 等。</li>
<li>类选择器 <code>.classname</code>：选择具有指定类名的元素。</li>
<li>ID 选择器 <code>#idname</code>：选择具有指定 ID 的元素。</li>
</ul>
</li>
<li><p><strong>组合选择器：</strong></p>
<ul>
<li>后代选择器（空格）：选择作为另一个元素后代的元素，例如 <code>div p</code> 选择所有 <code>&lt;p&gt;</code> 元素，但仅在其内部的 <code>&lt;div&gt;</code> 元素中。</li>
<li>相邻兄弟选择器（+）：选择紧接在另一个元素后的兄弟元素，例如 <code>h2 + p</code> 选择紧接在 <code>&lt;h2&gt;</code> 元素后的 <code>&lt;p&gt;</code> 元素。</li>
<li>兄弟选择器（~）：选择所有指定元素之后的兄弟元素，例如 <code>h2 ~ p</code> 选择所有 <code>&lt;h2&gt;</code> 元素之后的所有 <code>&lt;p&gt;</code> 元素。</li>
</ul>
</li>
<li><p><strong>属性选择器：</strong></p>
<ul>
<li>属性存在选择器 <code>[attr]</code>：选择具有指定属性的元素，例如 <code>[title]</code> 选择所有具有 title 属性的元素。</li>
<li>属性值选择器 <code>[attr=value]</code>：选择具有指定属性值的元素，例如 <code>[type=text]</code> 选择所有 type 属性值为 “text” 的元素。</li>
<li>子串匹配属性选择器 <code>[attr~=value]</code>、<code>[attr|=value]</code>、<code>[attr^=value]</code>、<code>[attr$=value]</code>、<code>[attr*=value]</code>：分别表示属性值包含指定值、以指定值开头、以指定值结尾、等于指定值、包含指定值的元素。</li>
</ul>
</li>
<li><p><strong>伪类&#x2F;元素选择器：</strong></p>
<ul>
<li>链接伪类：<code>:link</code>、<code>:visited</code>、<code>:hover</code>、<code>:active</code>、<code>:focus</code> 分别表示未访问、已访问、鼠标悬停、激活、获取焦点状态的链接。</li>
<li>父系伪类：<code>:first-child</code>、<code>:last-child</code>、<code>:nth-child(n)</code> 分别表示第一个子元素、最后一个子元素、第 n 个子元素。</li>
<li>其他伪类：<code>:nth-of-type(n)</code>、<code>:not(selector)</code>、<code>:root</code> 等。</li>
</ul>
<h4 id="计算方式"><a href="#计算方式" class="headerlink" title="计算方式"></a>计算方式</h4><p>优先级是由 <code>A</code> 、<code>B</code>、<code>C</code>、<code>D</code> 的值来决定的，其中它们的值计算规则如下：</p>
<ol>
<li>如果存在内联样式，那么 <code>A = 1</code>, 否则 <code>A = 0</code>;</li>
<li><code>B</code> 的值等于 <code>ID选择器</code> 出现的次数;</li>
<li><code>C</code> 的值等于 <code>类选择器</code> 和 <code>属性选择器</code> 和 <code>伪类</code> 出现的总次数;</li>
<li><code>D</code> 的值等于 <code>标签选择器</code> 和 <code>伪元素</code> 出现的总次数 。</li>
</ol>
</li>
</ul>
<h3 id="重排和重绘"><a href="#重排和重绘" class="headerlink" title="重排和重绘"></a>重排和重绘</h3><h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><ul>
<li><input disabled="" type="checkbox"> 普通流</li>
<li><input disabled="" type="checkbox"> 浮动</li>
<li><input disabled="" type="checkbox"> 绝对定位</li>
</ul>
<h3 id="CSS-布局"><a href="#CSS-布局" class="headerlink" title="CSS 布局"></a>CSS 布局</h3><p>display</p>
<h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><h3 id="立即调用的函数表达式（IIFE）"><a href="#立即调用的函数表达式（IIFE）" class="headerlink" title="立即调用的函数表达式（IIFE）"></a>立即调用的函数表达式（IIFE）</h3><p>根据 JavaScript 的语法，圆括号 <code>()</code>跟在函数名之后，表示调用该函数。比如，<code>print()</code>就表示调用 <code>print</code>函数。</p>
<p>有时，我们需要在定义函数之后，立即调用该函数。这时，你不能在函数的定义之后加上圆括号，这会产生语法错误。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function()&#123; /* code */ &#125;();</span><br><span class="line">// SyntaxError: Unexpected token (</span><br></pre></td></tr></table></figure>

<p>产生这个错误的原因是，<code>function</code>这个关键字既可以当作语句，也可以当作表达式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 语句</span><br><span class="line">function f() &#123;&#125;</span><br><span class="line"></span><br><span class="line">// 表达式</span><br><span class="line">var f = function f() &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>当作表达式时，函数可以定义后直接加圆括号调用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var f = function f()&#123; return 1&#125;();</span><br><span class="line">f // 1</span><br></pre></td></tr></table></figure>

<p>上面的代码中，函数定义后直接加圆括号调用，没有报错。原因就是 <code>function</code>作为表达式，引擎就把函数定义当作一个值。这种情况下，就不会报错。</p>
<p>为了避免解析的歧义，JavaScript 规定，如果 <code>function</code>关键字出现在行首，一律解释成语句。因此，引擎看到行首是 <code>function</code>关键字之后，认为这一段都是函数的定义，不应该以圆括号结尾，所以就报错了。</p>
<p>函数定义后立即调用的解决方法，就是不要让 <code>function</code>出现在行首，让引擎将其理解成一个表达式。最简单的处理，就是将其放在一个圆括号里面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function()&#123; /* code */ &#125;());</span><br><span class="line">// 或者</span><br><span class="line">(function()&#123; /* code */ &#125;)();</span><br></pre></td></tr></table></figure>

<p>上面两种写法都是以圆括号开头，引擎就会认为后面跟的是一个表达式，而不是函数定义语句，所以就避免了错误。这就叫做“立即调用的函数表达式”（Immediately-Invoked Function Expression），简称 IIFE。</p>
<p>注意，上面两种写法最后的分号都是必须的。如果省略分号，遇到连着两个 IIFE，可能就会报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 报错</span><br><span class="line">(function()&#123; /* code */ &#125;())</span><br><span class="line">(function()&#123; /* code */ &#125;())</span><br></pre></td></tr></table></figure>

<p>上面代码的两行之间没有分号，JavaScript 会将它们连在一起解释，将第二行解释为第一行的参数。</p>
<p>推而广之，任何让解释器以表达式来处理函数定义的方法，都能产生同样的效果，比如下面三种写法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var i = function()&#123; return 10; &#125;();</span><br><span class="line">true &amp;&amp; function()&#123; /* code */ &#125;();</span><br><span class="line">0, function()&#123; /* code */ &#125;();</span><br></pre></td></tr></table></figure>

<p>甚至像下面这样写，也是可以的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!function () &#123; /* code */ &#125;();</span><br><span class="line">~function () &#123; /* code */ &#125;();</span><br><span class="line">-function () &#123; /* code */ &#125;();</span><br><span class="line">+function () &#123; /* code */ &#125;();</span><br></pre></td></tr></table></figure>

<p>通常情况下，只对匿名函数使用这种“立即执行的函数表达式”。它的目的有两个：一是不必为函数命名，避免了污染全局变量；二是 IIFE 内部形成了一个单独的作用域，可以封装一些外部无法读取的私有变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">var</span> tmp = newData;</span><br><span class="line"><span class="title function_">processData</span>(tmp);</span><br><span class="line"><span class="title function_">storeData</span>(tmp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> tmp = newData;</span><br><span class="line">  <span class="title function_">processData</span>(tmp);</span><br><span class="line">  <span class="title function_">storeData</span>(tmp);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>上面代码中，写法二比写法一更好，因为完全避免了污染全局变量。</p>
<h3 id="ES6-常用"><a href="#ES6-常用" class="headerlink" title="ES6 常用"></a>ES6 常用</h3><ul>
<li>声明：let const</li>
<li>解构赋值</li>
<li>字符串的模板语法</li>
<li>箭头函数–</li>
<li></li>
</ul>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>执行上下文栈</title>
    <url>/post/dec4cd8f.html</url>
    <content><![CDATA[<h2 id="一个思考题"><a href="#一个思考题" class="headerlink" title="一个思考题"></a>一个思考题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">&quot;global scope&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkscope</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> scope = <span class="string">&quot;local scope&quot;</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> scope;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">f</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">checkscope</span>();</span><br><span class="line"><span class="keyword">var</span> scope = <span class="string">&quot;global scope&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkscope</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> scope = <span class="string">&quot;local scope&quot;</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> scope;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">checkscope</span>()();</span><br></pre></td></tr></table></figure>

<p>两段代码执行的结果均输出<code>local scope</code></p>
<blockquote>
<p>JavaScript 采用的是词法作用域，<strong>函数的作用域基于函数创建的位置</strong></p>
<p>JavaScript 函数的执行用到了作用域链，这个作用域链是在函数定义的时候创建的。嵌套的函数 f() 定义在这个作用域链里，其中的变量 scope 一定是局部变量，不管何时何地执行函数 f()，这种绑定在执行 f() 时依然有效。</p>
</blockquote>
<p>两端代码的压栈顺序</p>
<p>答案就是执行上下文栈的变化不一样。</p>
<p>第一段代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">push</span>(&lt;checkscope&gt; functionContext);</span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">push</span>(&lt;f&gt; functionContext);</span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">pop</span>();</span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">pop</span>();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>第一代码在执行 <code>checkscope()</code> 时，内部的 <code>f()</code> 也在函数内被执行。因此有连续两次的压栈操作。</p>
</blockquote>
<p>让我们模拟第二段代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">push</span>(&lt;checkscope&gt; functionContext);</span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">pop</span>();</span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">push</span>(&lt;f&gt; functionContext);</span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">pop</span>();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在第二段代码中，<code>checkscope()</code> 返回了函数 <code>f</code>，然后在返回的函数 <code>f</code> 上执行了另一次 <code>()</code>，这导致了两次执行上下文的压栈和出栈。</p>
</blockquote>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下几种情形拥有全局作用域：</p>
<ul>
<li>最&#x3D;&#x3D;外层函数&#x3D;&#x3D;和&#x3D;&#x3D;在最外层函数外面定义的变量&#x3D;&#x3D;拥有全局作用域</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> outVariable = <span class="string">&quot;我是最外层变量&quot;</span>; <span class="comment">//最外层变量</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outFun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//最外层函数</span></span><br><span class="line">  <span class="keyword">var</span> inVariable = <span class="string">&quot;内层变量&quot;</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">innerFun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//内层函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(inVariable);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">innerFun</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(outVariable); <span class="comment">//我是最外层变量</span></span><br><span class="line"><span class="title function_">outFun</span>(); <span class="comment">//内层变量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(inVariable); <span class="comment">//inVariable is not defined</span></span><br><span class="line"><span class="title function_">innerFun</span>(); <span class="comment">//innerFun is not defined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>所有末定义直接赋值的变量自动声明为拥有全局作用域</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outFun2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  variable = <span class="string">&quot;未定义直接赋值的变量&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> inVariable2 = <span class="string">&quot;内层变量2&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">outFun2</span>(); <span class="comment">//要先执行这个函数，否则根本不知道里面是啥</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(variable); <span class="comment">//未定义直接赋值的变量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(inVariable2); <span class="comment">//inVariable2 is not defined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>所有 window 对象的属性拥有全局作用域</li>
</ul>
<h2 id="执行上下文栈的流程"><a href="#执行上下文栈的流程" class="headerlink" title="执行上下文栈的流程"></a>执行上下文栈的流程</h2><ol>
<li><p>压入全局上下文</p>
</li>
<li><p>当执行一个到函数时，会创建一个函数执行上下文（Function Execution Context），并将其压入执行上下文栈。这个函数执行上下文包括了函数的参数，以及在函数内部声明的变量和函数。</p>
<p>在 JavaScript 中，存在全局执行上下文（Global Execution Context）和函数执行上下文（Function Execution Context）。全局执行上下文在浏览器开始读取脚本时创建，只有一个。而函数执行上下文每当函数被调用时都会创建。</p>
<p>每个执行上下文都有一个关联的变量对象（Variable Object），它包含了在上下文中定义的所有变量和函数。在函数执行上下文中，活动对象（Activation Object）扮演了变量对象的角色，它在函数执行上下文被推入执行上下文栈时创建，包含了函数的参数，以及在函数内部声明的所有变量和函数。</p>
</li>
<li><p><strong>执行函数执行上下文</strong></p>
<p>执行上下文的代码会分成两个阶段进行处理：分析和执行，我们也可以叫做：</p>
<ul>
<li><p>进入执行上下文</p>
<p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/readme/202402291724151.png" alt="image-20240229172408618"></p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript 深入学习</category>
      </categories>
      <tags>
        <tag>上下文</tag>
      </tags>
  </entry>
  <entry>
    <title>数组方法</title>
    <url>/post/4f9a43e7.html</url>
    <content><![CDATA[<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ol>
<li><p>join(‘str’)</p>
<p>数组-&gt;字符串</p>
<p>将数组通过str分割并拼接成字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// join实现字符串重复(n：次数)</span></span><br><span class="line"><span class="keyword">let</span> repeat = <span class="keyword">new</span> <span class="title class_">Array</span>(n+<span class="number">1</span>).<span class="title function_">join</span>(str)</span><br></pre></td></tr></table></figure></li>
<li><p>sort()</p>
<p>比较函数返回负数则a在b前（升序） 返回正数则a在b后（倒序）</p>
<p>改变了原数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Users</span> = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;鸣人&#x27;</span>, <span class="attr">age</span>: <span class="number">16</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;卡卡西&#x27;</span>, <span class="attr">age</span>: <span class="number">28</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;自来也&#x27;</span>, <span class="attr">age</span>: <span class="number">50</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;佐助&#x27;</span>, <span class="attr">age</span>: <span class="number">17</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 按照年龄从大到小排序</span></span><br><span class="line"><span class="title class_">Users</span>.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b.<span class="property">age</span> - a.<span class="property">age</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Users</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 按照年龄从小到大排序</span></span><br><span class="line"><span class="title class_">Users</span>.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="property">age</span> - b.<span class="property">age</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Users</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>reverse()</p>
<p>颠倒原数组，改变原数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">63</span>,<span class="number">2</span>,<span class="number">25</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">reverse</span>())<span class="comment">// [3, 25, 2, 63, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)<span class="comment">//[3, 25, 2, 63, 3]  原数组也被改变了</span></span><br></pre></td></tr></table></figure></li>
<li><p>concat()</p>
<p>连接两个或多个数组，不改变原数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> arrCopy = arr.<span class="title function_">concat</span>(<span class="number">9</span>,[<span class="number">11</span>,<span class="number">13</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrCopy);   <span class="comment">//[1, 3, 5, 7, 9, 11, 13]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);   <span class="comment">// [1, 3, 5, 7](原数组未被修改)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加的为数组时，将数组的每个元素的添加进去</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrCopy2 = arr.<span class="title function_">concat</span>([<span class="number">9</span>,[<span class="number">11</span>,<span class="number">13</span>]]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrCopy2);   <span class="comment">//[1, 3, 5, 7, 9, Array[2]]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrCopy2[<span class="number">5</span>]);   <span class="comment">//[11, 13]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>slice(param1,param2)</p>
<p>从原数组中截取，不改变原数组</p>
<p>返回从原数组中指定开始下标到结束下标之间的项组成的新数组</p>
<p>slice()方法可以接受一或两个参数，即要返回项的起始和结束位置</p>
<p>在<strong>只有一个参数</strong>的情况下， slice()方法返回从该参数指定位置开始到当前数组末尾的所有项</p>
<p>如果<strong>有两个参数</strong>，该方法返回起始和结束位置之间的项，但<strong>不包括结束位置的项</strong></p>
<p>参数为负数时，对应的下标为length-param</p>
</li>
<li><p>splice()</p>
<ul>
<li>删除元素</li>
<li>插入元素</li>
<li>替换元素</li>
</ul>
</li>
<li><p>findIndex()</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>文章配置</title>
    <url>/post/dc78123f.html</url>
    <content><![CDATA[<h2 id="表头配置"><a href="#表头配置" class="headerlink" title="表头配置"></a>表头配置</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img: &#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">updated:</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器如何保持登录</title>
    <url>/post/e190ec45.html</url>
    <content><![CDATA[<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/readme/202401061432265.png" alt="image-20240106143226574"></p>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.getSession().setAttribute(USER_LOGIN_STATE, user);</span><br></pre></td></tr></table></figure>

<p>通过 <code>request.getSession().setAttribute(USER_LOGIN_STATE, user);</code> 设置属性时，实际上将用户登录状态信息安全地存储在服务器端的 <code>HttpSession</code> 对象中。该 <code>HttpSession</code> 对象在服务器上被创建和管理（所有的请求都会被存储，由serverlet来管理），其中的属性数据被保存在服务器端。</p>
<p>接着，通过将 <code>JSESSIONID</code> 发送给客户端，并在后续的请求中通过 Cookie 携带回来，服务器能够根据这个 <code>JSESSIONID</code> 找到相应的 <code>HttpSession</code> 对象。通过 <code>getAttribute</code> 方法，我们可以从这个 <code>HttpSession</code> 中安全地读取属性信息，如用户登录状态。</p>
<h2 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h2><p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/readme/202401061502119.png" alt="image-20240106150249050"></p>
<p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/readme/202401061503827.png" alt="image-20240106150331724"></p>
]]></content>
      <categories>
        <category>网络通信</category>
      </categories>
      <tags>
        <tag>cookie</tag>
        <tag>session</tag>
        <tag>token</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/post/364ea8cc.html</url>
    <content><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h3><p>定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。策略模式让算法可以独立于使用它的客户变化。</p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a><strong>结构</strong></h3><p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/img/image-20230526150814561.png" alt="image-20230526150814561"></p>
<h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a><strong>角色</strong></h3><ul>
<li>Context（环境类）</li>
<li>Strategy（抽象策略类）</li>
<li>Concrete Strategy（具体策略类）</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a><strong>实现</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象策略类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">algorithm</span><span class="params">()</span>;  <span class="comment">//声明抽象算法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具体策略类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteStrategyA</span> <span class="keyword">extends</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="comment">//算法的具体实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">algorithm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//算法A</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//环境类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Strategy strategy; <span class="comment">//维持一个对抽象策略类的引用</span></span><br><span class="line">    <span class="comment">//注入策略对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStrategy</span><span class="params">(Strategy strategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy= strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用策略类中的算法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">algorithm</span><span class="params">()</span> &#123;</span><br><span class="line">        strategy.algorithm();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端代码片段</span></span><br><span class="line">……</span><br><span class="line"><span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>();</span><br><span class="line">Strategy strategy;</span><br><span class="line">strategy = <span class="keyword">new</span> <span class="title class_">ConcreteStrategyA</span>(); <span class="comment">//可在运行时指定类型，通过配置文件和反射机制实现</span></span><br><span class="line">context.setStrategy(strategy);</span><br><span class="line">context.algorithm();</span><br><span class="line">……</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>在不改变一个对象本身功能的基础上给对象增加额外的新行为，引入了装饰类，在装饰类中既可以调用待装饰的原有类的方法，还可以增加新的方法，以扩展原有类的功能</p>
<h3 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a><strong>结构</strong></h3><p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/img/image-20230526161910156.png" alt="image-20230526161910156"></p>
<h3 id="角色-1"><a href="#角色-1" class="headerlink" title="角色"></a><strong>角色</strong></h3><ul>
<li><p>Component（抽象构件）</p>
</li>
<li><p>Concrete Component（具体构件）</p>
</li>
<li><p>Decorator（抽象装饰类）</p>
</li>
<li><p>Concrete Decorator（具体装饰类）</p>
</li>
</ul>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a><strong>实现</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//	抽象构件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  具体构件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListBox</span> <span class="keyword">extends</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;显示列表框！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">//  具体构件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextBox</span> <span class="keyword">extends</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;显示文本框！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//	抽象装饰类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComponentDecorator</span> <span class="keyword">extends</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="comment">//维持对抽象构件类型对象的引用</span></span><br><span class="line">	<span class="keyword">private</span> Component component;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//注入抽象构件类型的对象</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">ComponentDecorator</span><span class="params">(Component component)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.component = component;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">		component.display();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//	具体装饰类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlackBorderDecorator</span> <span class="keyword">extends</span> <span class="title class_">ComponentDecorator</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">BlackBorderDecorator</span><span class="params">(Component component)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>(component);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.setBlackBorder();</span><br><span class="line">		<span class="built_in">super</span>.display();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBlackBorder</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;为构件增加黑色边框！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>定义对象之间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象都得到通知并被自动更新。</p>
<h3 id="结构-2"><a href="#结构-2" class="headerlink" title="结构"></a><strong>结构</strong></h3><p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/img/image-20230528120615051.png" alt="image-20230528120615051"></p>
<h3 id="角色-2"><a href="#角色-2" class="headerlink" title="角色"></a>角色</h3><ul>
<li>Subject（目标）</li>
<li>Concrete Subject（具体目标）</li>
<li>Observer（观察者）</li>
<li>Concrete Observer（具体观察者）</li>
</ul>
<h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//战队控制中心类：抽象目标类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AllyControlCenter</span> &#123;</span><br><span class="line">	<span class="keyword">protected</span> String allyName; <span class="comment">//战队名称</span></span><br><span class="line">	<span class="keyword">protected</span> ArrayList&lt;Observer&gt; players = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Observer&gt;(); <span class="comment">//定义一个集合用于存储战队成员</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAllyName</span><span class="params">(String allyName)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.allyName = allyName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getAllyName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.allyName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//注册方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">join</span><span class="params">(Observer obs)</span> &#123;</span><br><span class="line">		System.out.println(obs.getName() + <span class="string">&quot;加入&quot;</span> + <span class="built_in">this</span>.allyName + <span class="string">&quot;战队！&quot;</span>);</span><br><span class="line">		players.add(obs);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//注销方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quit</span><span class="params">(Observer obs)</span> &#123;</span><br><span class="line">		System.out.println(obs.getName() + <span class="string">&quot;退出&quot;</span> + <span class="built_in">this</span>.allyName + <span class="string">&quot;战队！&quot;</span>);</span><br><span class="line">		players.remove(obs);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//声明抽象通知方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">notifyObserver</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具体战队控制中心类：具体目标类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteAllyControlCenter</span> <span class="keyword">extends</span> <span class="title class_">AllyControlCenter</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">ConcreteAllyControlCenter</span><span class="params">(String allyName)</span> &#123;</span><br><span class="line">		System.out.println(allyName + <span class="string">&quot;战队组建成功！&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">		<span class="built_in">this</span>.allyName = allyName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//实现通知方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyObserver</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		System.out.println(<span class="built_in">this</span>.allyName + <span class="string">&quot;战队紧急通知，盟友&quot;</span> + name + <span class="string">&quot;遭受敌人攻击！&quot;</span>);</span><br><span class="line">		<span class="comment">//遍历观察者集合，调用每一个盟友（自己除外）的支援方法</span></span><br><span class="line">		<span class="keyword">for</span>(Object obs : players) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!((Observer)obs).getName().equalsIgnoreCase(name)) &#123;</span><br><span class="line">				((Observer)obs).help();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象观察类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">help</span><span class="params">()</span>; <span class="comment">//声明支援盟友方法(响应方法)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beAttacked</span><span class="params">(AllyControlCenter acc)</span>; <span class="comment">//声明遭受攻击方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//战队成员类：具体观察者类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Player</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Player</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//支援盟友方法的实现</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">help</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;坚持住，&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;来救你！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//遭受攻击方法的实现，当遭受攻击时将调用战队控制中心类的通知方法notifyObserver()来通知盟友</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beAttacked</span><span class="params">(AllyControlCenter acc)</span> &#123;</span><br><span class="line">		System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;被攻击！&quot;</span>);</span><br><span class="line">		acc.notifyObserver(name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">		<span class="comment">//定义观察目标对象</span></span><br><span class="line">		AllyControlCenter acc;</span><br><span class="line">		acc = <span class="keyword">new</span> <span class="title class_">ConcreteAllyControlCenter</span>(<span class="string">&quot;金庸群侠&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义四个观察者对象</span></span><br><span class="line">		Observer player1,player2,player3,player4,player5;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册观察者</span></span><br><span class="line">		player1 = <span class="keyword">new</span> <span class="title class_">Player</span>(<span class="string">&quot;杨过&quot;</span>);</span><br><span class="line">		acc.join(player1);</span><br><span class="line"></span><br><span class="line">		player2 = <span class="keyword">new</span> <span class="title class_">Player</span>(<span class="string">&quot;令狐冲&quot;</span>);</span><br><span class="line">		acc.join(player2);</span><br><span class="line"></span><br><span class="line">		player3 = <span class="keyword">new</span> <span class="title class_">Player</span>(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">		acc.join(player3);</span><br><span class="line"></span><br><span class="line">		player4 = <span class="keyword">new</span> <span class="title class_">Player</span>(<span class="string">&quot;段誉&quot;</span>);</span><br><span class="line">		acc.join(player4);</span><br><span class="line"></span><br><span class="line">		player5 = <span class="keyword">new</span> <span class="title class_">Player</span>(<span class="string">&quot;郭靖&quot;</span>);</span><br><span class="line">		acc.join(player5);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">//某成员遭受攻击 调用通知方法</span></span><br><span class="line">		player2.beAttacked(acc);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>适配器模式是一种结构型设计模式，旨在解决两个不兼容接口之间的兼容性问题。它允许将一个类的接口转换成客户端所期望的另一个接口</p>
<h3 id="结构-3"><a href="#结构-3" class="headerlink" title="结构"></a>结构</h3><p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/img/image-20230528124621463.png" alt="image-20230528124621463"></p>
<h3 id="角色-3"><a href="#角色-3" class="headerlink" title="角色"></a>角色</h3><ul>
<li>Target（目标抽象类）</li>
<li>Adapter（适配器类）</li>
<li>Adaptee（适配者类）</li>
</ul>
<h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//救护车灯类，充当适配者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AmbulanceLamp</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alarmLamp</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;呈现救护车灯闪烁！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//救护车声音类，充当适配者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AmbulanceSound</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alarmSound</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;发出救护车声音！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//救护车适配器，充当适配器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AmbulanceCarAdapter</span> <span class="keyword">extends</span> <span class="title class_">CarController</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> AmbulanceSound sound;  <span class="comment">//定义适配者AmbulanceSound对象</span></span><br><span class="line">	<span class="keyword">private</span> AmbulanceLamp lamp;    <span class="comment">//定义适配者AmbulanceLamp对象</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">AmbulanceCarAdapter</span><span class="params">()</span> &#123;</span><br><span class="line">		sound = <span class="keyword">new</span> <span class="title class_">AmbulanceSound</span>();</span><br><span class="line">		lamp = <span class="keyword">new</span> <span class="title class_">AmbulanceLamp</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//发出救护车声音</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">phonate</span><span class="params">()</span> &#123;</span><br><span class="line">		sound.alarmSound();  <span class="comment">//调用适配者类AmbulanceSound的方法(类似于转发调用)</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//呈现救护车灯闪烁</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">twinkle</span><span class="params">()</span> &#123;</span><br><span class="line">		lamp.alarmLamp();   <span class="comment">//调用适配者类AmbulanceLamp的方法</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//汽车控制类，充当目标抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CarController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;玩具汽车移动！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">phonate</span><span class="params">()</span>; <span class="comment">//发出声音</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">twinkle</span><span class="params">()</span>; <span class="comment">//灯光闪烁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><p>提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。又称为工具(Kit)模式抽象工厂模式中的具体工厂不只是创建一种产品，它负责创建一族产品当一个工厂等级结构可以创建出分属于不同产品等级结构的一个产品族中的所有对象时，抽象工厂模式比工厂方法模式更为简单、更有效率</p>
<h3 id="结构-4"><a href="#结构-4" class="headerlink" title="结构"></a>结构</h3><p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/img/image-20230529121322432.png" alt="image-20230529121322432"></p>
<h3 id="角色-4"><a href="#角色-4" class="headerlink" title="角色"></a>角色</h3><ul>
<li>Abstract Factory（抽象工厂）</li>
<li>Concrete Factory（具体工厂）</li>
<li>Abstract Product（抽象产品）</li>
<li>Concrete Product（具体产品）</li>
</ul>
<h3 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h3><p><strong>三种抽象产品</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象按钮</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象边框</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ComboBox</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象文本框</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TextField</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>抽象工厂</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SkinFactory</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> Button <span class="title function_">createButton</span><span class="params">()</span>;</span><br><span class="line">	<span class="keyword">public</span> TextField <span class="title function_">createTextField</span><span class="params">()</span>;</span><br><span class="line">	<span class="keyword">public</span> ComboBox <span class="title function_">createComboBox</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>具体产品（部分）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringButton</span> <span class="keyword">implements</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;显示浅绿色按钮。&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringComboBox</span> <span class="keyword">implements</span> <span class="title class_">ComboBox</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;显示绿色边框组合框。&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SummerButton</span> <span class="keyword">implements</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;显示浅蓝色按钮。&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SummerComboBox</span> <span class="keyword">implements</span> <span class="title class_">ComboBox</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;显示蓝色边框组合框。&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>具体工厂</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SpringSkinFactory工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSkinFactory</span> <span class="keyword">implements</span> <span class="title class_">SkinFactory</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> Button <span class="title function_">createButton</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpringButton</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> TextField <span class="title function_">createTextField</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpringTextField</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> ComboBox <span class="title function_">createComboBox</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpringComboBox</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SummerSkinFactory工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SummerSkinFactory</span> <span class="keyword">implements</span> <span class="title class_">SkinFactory</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> Button <span class="title function_">createButton</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SummerButton</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> TextField <span class="title function_">createTextField</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SummerTextField</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> ComboBox <span class="title function_">createComboBox</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SummerComboBox</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><h3 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h3><p>将一个复杂对象的&#x3D;&#x3D;构建与它的表示分离&#x3D;&#x3D;，使得同样的构建过程可以创建不同的表示。将客户端与包含多个部件的复杂对象的创建过程分离，客户端无须知道复杂对象的内部组成部分与装配方式，只需要知道所需建造者的类型即可关注如何逐步创建一个复杂的对象，不同的建造者定义了不同的创建过程</p>
<h3 id="结构-5"><a href="#结构-5" class="headerlink" title="结构"></a>结构</h3><p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/img/image-20230529185109415.png" alt="image-20230529185109415"></p>
<h3 id="角色-5"><a href="#角色-5" class="headerlink" title="角色"></a>角色</h3><ul>
<li>Builder（抽象建造者）</li>
<li>Concrete Builder（具体建造者）</li>
<li>Product（产品）</li>
<li>Director（指挥者）</li>
</ul>
<h3 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 具体角色类（产品）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Actor</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String type; <span class="comment">//角色类型</span></span><br><span class="line">	<span class="keyword">private</span> String sex; <span class="comment">//性别</span></span><br><span class="line">	<span class="keyword">private</span> String face; <span class="comment">//脸型</span></span><br><span class="line">	<span class="keyword">private</span> String costume; <span class="comment">//服装</span></span><br><span class="line">	<span class="keyword">private</span> String hairstyle; <span class="comment">//发型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//省略具体的getter setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象建造者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ActorBuilder</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Actor</span> <span class="variable">actor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Actor</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildType</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildSex</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildFace</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildCostume</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildHairstyle</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工厂方法，返回一个完整的游戏角色对象</span></span><br><span class="line">    <span class="keyword">public</span> Actor <span class="title function_">createActor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> actor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 具体建造者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AngelBuilder</span> <span class="keyword">extends</span> <span class="title class_">ActorBuilder</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildType</span><span class="params">()</span> &#123;</span><br><span class="line">		actor.setType(<span class="string">&quot;天使&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildSex</span><span class="params">()</span> &#123;</span><br><span class="line">		actor.setSex(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildFace</span><span class="params">()</span> &#123;</span><br><span class="line">		actor.setFace(<span class="string">&quot;漂亮&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildCostume</span><span class="params">()</span> &#123;</span><br><span class="line">		actor.setCostume(<span class="string">&quot;白裙&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildHairstyle</span><span class="params">()</span> &#123;</span><br><span class="line">		actor.setHairstyle(<span class="string">&quot;披肩长发&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指挥者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActorController</span> &#123;</span><br><span class="line">    <span class="comment">//逐步构建复杂产品对象</span></span><br><span class="line">	<span class="keyword">public</span> Actor <span class="title function_">construct</span><span class="params">(ActorBuilder ab)</span> &#123;</span><br><span class="line">		Actor actor;</span><br><span class="line">		ab.buildType();</span><br><span class="line">		ab.buildSex();</span><br><span class="line">		ab.buildFace();</span><br><span class="line">		ab.buildCostume();</span><br><span class="line">		ab.buildHairstyle();</span><br><span class="line">		actor=ab.createActor();</span><br><span class="line">		<span class="keyword">return</span> actor;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="comment">//针对抽象建造者编程</span></span><br><span class="line">        ActorBuilder ab;</span><br><span class="line">        <span class="comment">//反射生成具体建造者对象</span></span><br><span class="line">        ab = (ActorBuilder)XMLUtil.getBean();</span><br><span class="line"></span><br><span class="line">        <span class="type">ActorController</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActorController</span>();</span><br><span class="line">        Actor actor;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过指挥者创建完整的建造者对象</span></span><br><span class="line">        <span class="comment">//传入具体建造者对象（ActorBuilder 的子类对象）</span></span><br><span class="line">        actor = ac.construct(ab);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> actor.getType();</span><br><span class="line">        System.out.println(type + <span class="string">&quot;的外观：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;性别：&quot;</span> + actor.getSex());</span><br><span class="line">        System.out.println(<span class="string">&quot;面容：&quot;</span> + actor.getFace());</span><br><span class="line">        System.out.println(<span class="string">&quot;服装：&quot;</span> + actor.getCostume());</span><br><span class="line">        System.out.println(<span class="string">&quot;发型：&quot;</span> + actor.getHairstyle());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><h3 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h3><p>使用原型实例指定待创建对象的类型，并且通过复制这个原型来创建新的对象</p>
<h3 id="结构-6"><a href="#结构-6" class="headerlink" title="结构"></a>结构</h3><p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/img/image-20230530091411776.png" alt="image-20230530091411776"></p>
<h3 id="角色-6"><a href="#角色-6" class="headerlink" title="角色"></a>角色</h3><ul>
<li>Prototype（抽象原型类）</li>
<li>Concrete Prototype（具体原型类）</li>
<li>Client（客户类）</li>
</ul>
<h3 id="实现-6"><a href="#实现-6" class="headerlink" title="实现"></a>实现</h3><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>(其中的引用对象相同)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeeklyLog</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="comment">//为了简化设计和实现，假设一份工作周报中只有一个附件对象，实际情况中可以包含多个附件，可以通过List等集合对象来实现</span></span><br><span class="line">    <span class="keyword">private</span> Attachment attachment;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String date;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAttachment</span><span class="params">(Attachment attachment)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.attachment = attachment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDate</span><span class="params">(String date)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContent</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Attachment <span class="title function_">getAttachment</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">this</span>.attachment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">this</span>.date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getContent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">this</span>.content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用clone()方法实现浅克隆</span></span><br><span class="line">    <span class="keyword">public</span> WeeklyLog <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            obj = <span class="built_in">super</span>.clone();</span><br><span class="line">            <span class="keyword">return</span> (WeeklyLog) obj;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不支持复制！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>&#x3D;&#x3D;（序列化与反序列化）&#x3D;&#x3D;</p>
<p>序列化是将对象转换为字节流的过程，可以将对象保存到文件、传输到网络或在进程之间进行通信。在序列化过程中，对象的状态（即对象的数据）被转换为字节序列，包括对象的字段和相应的数值。序列化后的字节流可以被保存下来或传输给其他地方。</p>
<p>反序列化是将字节流转换为对象的过程，将保存在字节流中的数据重新构造成对象。在反序列化过程中，字节序列被还原为对象的状态，重新创建对象并将保存的数据填充到对象的字段中。</p>
<p>在写入字节流时，对象的所有字段都会被序列化为字节序列。而在读取字节流时，字节序列会被反序列化为一个新的对象，并将保存的数据填充到新对象的字段中。</p>
<p>由于反序列化过程会重新创建对象，因此新对象与原始对象是完全独立的，它们拥有相同的数据但是位于不同的内存位置。这样就实现了深拷贝，保留了对象及其所有引用类型字段的数据，并且不共享同一块内存。</p>
<p>需要注意的是，为了使对象能够进行序列化和反序列化，需要实现 <code>Serializable</code> 接口，并确保对象的所有引用类型字段也是可序列化的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeeklyLog</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Attachment attachment;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String date;</span><br><span class="line">	<span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAttachment</span><span class="params">(Attachment attachment)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.attachment = attachment;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDate</span><span class="params">(String date)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.date = date;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContent</span><span class="params">(String content)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.content = content;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Attachment <span class="title function_">getAttachment</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="built_in">this</span>.attachment);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="built_in">this</span>.name);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getDate</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="built_in">this</span>.date);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getContent</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="built_in">this</span>.content);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//使用序列化技术实现深克隆</span></span><br><span class="line">	<span class="keyword">public</span> WeeklyLog <span class="title function_">deepClone</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, OptionalDataException &#123;</span><br><span class="line">		<span class="comment">//将对象写入流中</span></span><br><span class="line">		ByteArrayOutputStream bao=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">		ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bao);</span><br><span class="line">		oos.writeObject(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//将对象从流中取出</span></span><br><span class="line">		ByteArrayInputStream bis=<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bao.toByteArray());</span><br><span class="line">		ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bis);</span><br><span class="line">		<span class="keyword">return</span> (WeeklyLog)ois.readObject();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="介绍-7"><a href="#介绍-7" class="headerlink" title="介绍"></a>介绍</h3><p>一个类只有一个实例，并提供一个全局访问点来访问这个唯一实例。</p>
<h3 id="结构-7"><a href="#结构-7" class="headerlink" title="结构"></a>结构</h3><p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/img/image-20230530150040291.png" alt="image-20230530150040291"></p>
<h3 id="角色-7"><a href="#角色-7" class="headerlink" title="角色"></a>角色</h3><ul>
<li>Singleton（单例）</li>
</ul>
<h3 id="实现-7"><a href="#实现-7" class="headerlink" title="实现"></a>实现</h3><h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">// 私有静态变量，用于保存单例实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数，防止外部直接实例化对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化操作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共静态方法，提供全局访问点获取单例实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><ul>
<li>基础版</li>
</ul>
<p>多线程环境下可能会出现问题。如果多个线程同时访问<code>getInstance()</code>方法，并且在<code>instance</code>还未被创建时，那么每个线程都会通过判断<code>instance</code>为<code>null</code>的条件，并创建一个新的实例。这样就会破坏单例的唯一性，导致多个实例被创建。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazySingleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">LazySingleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazySingleton</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">LazySingleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>添加锁方法</li>
</ul>
<p>通过<code>synchronized</code>关键字修饰<code>getInstance()</code>方法，以确保在多线程环境下只创建一个实例。当第一个线程调用<code>getInstance()</code>方法时，如果实例尚未创建，它将创建一个新的实例</p>
<p><u>存在缺点</u>：</p>
<ol>
<li>每次调用<code>getInstance()</code>方法都会进入<code>synchronized</code>同步块，即使实例已经被创建。这会造成不必要的同步开销，影响性能。</li>
<li>在多线程环境下，当多个线程同时通过第一个判断条件<code>instance == null</code>时，它们会依次进入<code>synchronized</code>同步块，而只有一个线程能够创建实例，其他线程会被阻塞。这可能会引起线程竞争和性能问题。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazySingleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">LazySingleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazySingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 私有构造函数，防止外部直接实例化对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公共静态方法，提供全局访问点获取单例实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 单例实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果实例为空，则创建新的实例</span></span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">LazySingleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>锁代码段</li>
</ul>
<p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/img/image-20230530151643226.png" alt="image-20230530151643226"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazySingleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">LazySingleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazySingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 私有构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123; <span class="comment">// 第一个判断，避免不必要的同步</span></span><br><span class="line">            <span class="keyword">synchronized</span> (LazySingleton.class) &#123; <span class="comment">// synchronized关键字修饰的同步块</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123; <span class="comment">// 第二个判断，确保只有一个线程创建实例</span></span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">LazySingleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>&#x3D;&#x3D;相关介绍&#x3D;&#x3D;：</p>
<p>在静态内部类中定义的静态方法可以直接被调用，不需要通过创建内部类的实例来访问。静态内部类与外部类之间是独立的，因此可以直接访问静态内部类中的静态成员，包括静态方法。</p>
<p>在上述示例中，静态内部类<code>HolderClass</code>中的<code>instance</code>变量是私有静态的，而<code>getInstance()</code>方法是公共静态的。这意味着可以通过<code>Singleton.HolderClass.instance</code>直接访问<code>instance</code>变量，也可以通过<code>Singleton.getInstance()</code>调用<code>getInstance()</code>方法来获取单例实例。这种方式提供了更简洁的访问方式，无需显式创建内部类实例。</p>
<p>需要注意的是，静态内部类中不能直接访问外部类的非静态成员，因为静态内部类在没有外部类实例的情况下也可以被访问。如果需要访问外部类的非静态成员，可以通过创建外部类的实例来实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Initialization on Demand Holder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 私有构造函数，防止外部直接实例化对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HolderClass</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公共静态方法，提供全局访问点获取单例实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 单例实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> HolderClass.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对应调用方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="comment">// 使用单例对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><h3 id="介绍-8"><a href="#介绍-8" class="headerlink" title="介绍"></a>介绍</h3><p>桥接模式是一种结构型设计模式，它旨在将抽象部分与其实现部分分离，使它们可以独立地变化。它通过创建一个桥接接口，将抽象和实现解耦，使它们可以独立地进行扩展。</p>
<p>在桥接模式中，存在两个维度的抽象和实现，通过桥接接口将它们连接起来。其中，抽象部分定义了高层的抽象方法和属性，而实现部分定义了具体实现的方法和属性。通过桥接接口，抽象部分和实现部分可以独立地进行扩展和变化，而彼此之间的关系通过桥接接口来实现。</p>
<h3 id="结构-8"><a href="#结构-8" class="headerlink" title="结构"></a>结构</h3><p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/img/image-20230530152030299.png" alt="image-20230530152030299"></p>
<h3 id="角色-8"><a href="#角色-8" class="headerlink" title="角色"></a>角色</h3><ul>
<li>Abstraction（抽象类）</li>
<li>Refined Abstraction（扩充抽象类）</li>
<li>Implementor（实现类接口）</li>
<li>Concrete Implementor（具体实现类）</li>
</ul>
<h3 id="实现-8"><a href="#实现-8" class="headerlink" title="实现"></a>实现</h3><p><strong>理解</strong>：通过桥接模式，图像实现类（如 <code>LinuxImp</code>）和操作系统实现类（如 <code>Linux</code>）被解耦，它们可以独立地变化和扩展。图像实现类负责将图像数据转换成特定格式（如像素矩阵），而操作系统实现类负责将像素矩阵在特定操作系统中进行显示。这样，通过注入不同的图像实现类和操作系统实现类，可以实现不同图像格式在不同操作系统下的显示，而不需要修改现有的类结构。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象图像类，充当抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Image</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> ImageImp imp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入实现类接口对象</span></span><br><span class="line">    <span class="comment">//桥接的关键位置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImageImp</span><span class="params">(ImageImp imp)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.imp = imp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">parseFile</span><span class="params">(String fileName)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具体图像类</span></span><br><span class="line"><span class="comment">//BMP格式图像类，充当扩充抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BMPImage</span> <span class="keyword">extends</span> <span class="title class_">Image</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parseFile</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">      <span class="comment">//模拟解析BMP文件并获得一个像素矩阵对象m;</span></span><br><span class="line">      <span class="type">Matrix</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">      imp.doPaint(m);</span><br><span class="line">      System.out.println(fileName + <span class="string">&quot;，格式为BMP。&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GIF格式图像类，充当扩充抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GIFImage</span> <span class="keyword">extends</span> <span class="title class_">Image</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parseFile</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">      <span class="comment">//模拟解析GIF文件并获得一个像素矩阵对象m;</span></span><br><span class="line">      <span class="type">Matrix</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">      imp.doPaint(m);</span><br><span class="line">      System.out.println(fileName + <span class="string">&quot;，格式为GIF。&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象操作系统实现类，充当实现类接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ImageImp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPaint</span><span class="params">(Matrix m)</span>;  <span class="comment">//显示像素矩阵m</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Linux操作系统实现类，充当具体实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinuxImp</span> <span class="keyword">implements</span> <span class="title class_">ImageImp</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPaint</span><span class="params">(Matrix m)</span> &#123;</span><br><span class="line">  	<span class="comment">//调用Linux系统的绘制函数绘制像素矩阵</span></span><br><span class="line">  	System.out.print(<span class="string">&quot;在Linux操作系统中显示图像：&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//像素矩阵类，辅助类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Matrix</span> &#123;</span><br><span class="line">    <span class="comment">//代码省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><h3 id="介绍-9"><a href="#介绍-9" class="headerlink" title="介绍"></a>介绍</h3><p>它允许对象在内部状态改变时改变其行为。该模式将对象的行为封装在不同的状态对象中，使得对象在不同状态下具有不同的行为，同时将状态的切换和行为的执行解耦。</p>
<h3 id="结构-9"><a href="#结构-9" class="headerlink" title="结构"></a>结构</h3><p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/img/image-20230531170222824.png" alt="image-20230531170222824"></p>
<h3 id="角色-9"><a href="#角色-9" class="headerlink" title="角色"></a>角色</h3><ul>
<li><p>Context（环境类）</p>
</li>
<li><p>State（抽象状态类）</p>
</li>
<li><p>Concrete State（具体状态类）</p>
</li>
</ul>
<h3 id="实现-9"><a href="#实现-9" class="headerlink" title="实现"></a>实现</h3><p>具体的状态转换逻辑位于具体状态类中，每个状态类负责自己的状态转换和相应的操作</p>
<p>還有另外幾種狀態類的轉換方式 只提供對對應轉換方式代碼</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象開關對象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">SwitchState</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">on</span><span class="params">(Switch s)</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">off</span><span class="params">(Switch s)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 具體開關對象</span></span><br><span class="line"><span class="comment">// 方法中會傳入一個對象 并修改該對象的currentstate</span></span><br><span class="line"><span class="comment">// 具體代碼可見switch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打开状态类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OnState</span> <span class="keyword">extends</span> <span class="title class_">SwitchState</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">on</span><span class="params">(Switch s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已经打开！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">off</span><span class="params">(Switch s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭！&quot;</span>);</span><br><span class="line">        s.setState(Switch.getState(<span class="string">&quot;off&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭状态类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OffState</span> <span class="keyword">extends</span> <span class="title class_">SwitchState</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">on</span><span class="params">(Switch s)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;打开！&quot;</span>);</span><br><span class="line">		s.setState(Switch.getState(<span class="string">&quot;on&quot;</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">off</span><span class="params">(Switch s)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;已经关闭！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Switch</span> &#123;</span><br><span class="line">	<span class="comment">//定义三个静态的状态对象 所有的开关对象共享状态</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SwitchState currentState,onState,offState;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 构造函数 默认状态为开启</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Switch</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">		onState = <span class="keyword">new</span> <span class="title class_">OnState</span>();</span><br><span class="line">		offState = <span class="keyword">new</span> <span class="title class_">OffState</span>();</span><br><span class="line">		currentState = onState;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 該方法會被狀態方法進行調用</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(SwitchState state)</span> &#123;</span><br><span class="line">		currentState = state;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> SwitchState <span class="title function_">getState</span><span class="params">(String type)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">&quot;on&quot;</span>)) &#123;</span><br><span class="line">			<span class="keyword">return</span> onState;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> offState;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面兩個方法會將當前對象傳入 若狀態改變則會對對cuurent進行修改</span></span><br><span class="line">    <span class="comment">//打开开关</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">on</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.print(name);</span><br><span class="line">		currentState.on(<span class="built_in">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//关闭开关</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">off</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.print(name);</span><br><span class="line">		currentState.off(<span class="built_in">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="其餘轉換方式實現"><a href="#其餘轉換方式實現" class="headerlink" title="其餘轉換方式實現"></a>其餘轉換方式實現</h3><ul>
<li>放大鏡</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在環境類中進行轉換</span></span><br><span class="line"><span class="comment">//屏幕类：环境类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line">	<span class="comment">//枚举所有的状态，currentState表示当前状态</span></span><br><span class="line">	<span class="keyword">private</span> ScreenState currentState, normalState, largerState, largestState;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Screen</span><span class="params">()</span> &#123;</span><br><span class="line">  	<span class="built_in">this</span>.normalState = <span class="keyword">new</span> <span class="title class_">NormalState</span>(); <span class="comment">//创建正常状态对象</span></span><br><span class="line">  	<span class="built_in">this</span>.largerState = <span class="keyword">new</span> <span class="title class_">LargerState</span>(); <span class="comment">//创建二倍放大状态对象</span></span><br><span class="line">  	<span class="built_in">this</span>.largestState = <span class="keyword">new</span> <span class="title class_">LargestState</span>(); <span class="comment">//创建四倍放大状态对象</span></span><br><span class="line">  	<span class="built_in">this</span>.currentState = normalState; <span class="comment">//设置初始状态</span></span><br><span class="line">  	<span class="built_in">this</span>.currentState.display();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(ScreenState state)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.currentState = state;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//单击事件处理方法，封转了对状态类中业务方法的调用和状态的转换</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">()</span> &#123;</span><br><span class="line">	  	<span class="keyword">if</span> (<span class="built_in">this</span>.currentState == normalState) &#123;</span><br><span class="line">	  		<span class="built_in">this</span>.setState(largerState);</span><br><span class="line">	  		<span class="built_in">this</span>.currentState.display();</span><br><span class="line">	  	&#125;</span><br><span class="line">	  	<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.currentState == largerState) &#123;</span><br><span class="line">	  		<span class="built_in">this</span>.setState(largestState);</span><br><span class="line">	  		<span class="built_in">this</span>.currentState.display();</span><br><span class="line">	  	&#125;</span><br><span class="line">	  	<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.currentState == largestState) &#123;</span><br><span class="line">	  		<span class="built_in">this</span>.setState(normalState);</span><br><span class="line">	  		<span class="built_in">this</span>.currentState.display();</span><br><span class="line">	  	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>銀行賬戶</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//银行账户：环境类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> AccountState state; <span class="comment">//维持一个对抽象状态对象的引用</span></span><br><span class="line">	<span class="keyword">private</span> String owner; <span class="comment">//开户名</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">double</span> <span class="variable">balance</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//账户余额</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(String owner,<span class="type">double</span> init)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.owner = owner;</span><br><span class="line">		<span class="built_in">this</span>.balance = balance;</span><br><span class="line">		<span class="built_in">this</span>.state = <span class="keyword">new</span> <span class="title class_">NormalState</span>(<span class="built_in">this</span>); <span class="comment">//设置初始状态</span></span><br><span class="line">		System.out.println(<span class="built_in">this</span>.owner + <span class="string">&quot;开户，初始金额为&quot;</span> + init);</span><br><span class="line">		System.out.println(<span class="string">&quot;---------------------------------------------&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.balance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(<span class="type">double</span> balance)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.balance = balance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(AccountState state)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.state = state;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">		System.out.println(<span class="built_in">this</span>.owner + <span class="string">&quot;存款&quot;</span> + amount);</span><br><span class="line">		state.deposit(amount); <span class="comment">//调用状态对象的deposit()方法</span></span><br><span class="line">		System.out.println(<span class="string">&quot;现在余额为&quot;</span>+ <span class="built_in">this</span>.balance);</span><br><span class="line">		System.out.println(<span class="string">&quot;现在帐户状态为&quot;</span>+ <span class="built_in">this</span>.state.getClass().getName());</span><br><span class="line">		System.out.println(<span class="string">&quot;---------------------------------------------&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">		System.out.println(<span class="built_in">this</span>.owner + <span class="string">&quot;取款&quot;</span> + amount);</span><br><span class="line">		state.withdraw(amount); <span class="comment">//调用状态对象的withdraw()方法</span></span><br><span class="line">		System.out.println(<span class="string">&quot;现在余额为&quot;</span>+ <span class="built_in">this</span>.balance);</span><br><span class="line">		System.out.println(<span class="string">&quot;现在帐户状态为&quot;</span>+ <span class="built_in">this</span>. state.getClass().getName());</span><br><span class="line">		System.out.println(<span class="string">&quot;---------------------------------------------&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">computeInterest</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		state.computeInterest(); <span class="comment">//调用状态对象的computeInterest()方法</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象状态类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AccountState</span> &#123;</span><br><span class="line">	<span class="keyword">protected</span> Account acc;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amount)</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> amount)</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">computeInterest</span><span class="params">()</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">stateCheck</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正常状态：具体状态类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NormalState</span> <span class="keyword">extends</span> <span class="title class_">AccountState</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">NormalState</span><span class="params">(Account acc)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.acc = acc;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">NormalState</span><span class="params">(AccountState state)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.acc = state.acc;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">		acc.setBalance(acc.getBalance() + amount);</span><br><span class="line">		stateCheck();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">		acc.setBalance(acc.getBalance() - amount);</span><br><span class="line">		stateCheck();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">computeInterest</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;正常状态，无须支付利息！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//状态转换</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stateCheck</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (acc.getBalance() &gt; -<span class="number">2000</span> &amp;&amp; acc.getBalance() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">			acc.setState(<span class="keyword">new</span> <span class="title class_">OverdraftState</span>(<span class="built_in">this</span>));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (acc.getBalance() == -<span class="number">2000</span>) &#123;</span><br><span class="line">			acc.setState(<span class="keyword">new</span> <span class="title class_">RestrictedState</span>(<span class="built_in">this</span>));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (acc.getBalance() &lt; -<span class="number">2000</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;操作受限！&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//透支状态：具体状态类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OverdraftState</span> <span class="keyword">extends</span> <span class="title class_">AccountState</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">OverdraftState</span><span class="params">(AccountState state)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.acc = state.acc;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">		acc.setBalance(acc.getBalance() + amount);</span><br><span class="line">		stateCheck();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">		acc.setBalance(acc.getBalance() - amount);</span><br><span class="line">		stateCheck();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">computeInterest</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;计算利息！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//状态转换</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stateCheck</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (acc.getBalance() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			acc.setState(<span class="keyword">new</span> <span class="title class_">NormalState</span>(<span class="built_in">this</span>));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (acc.getBalance() == -<span class="number">2000</span>) &#123;</span><br><span class="line">			acc.setState(<span class="keyword">new</span> <span class="title class_">RestrictedState</span>(<span class="built_in">this</span>));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (acc.getBalance() &lt; -<span class="number">2000</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;操作受限！&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//受限状态：具体状态类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestrictedState</span> <span class="keyword">extends</span> <span class="title class_">AccountState</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">RestrictedState</span><span class="params">(AccountState state)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.acc = state.acc;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">		acc.setBalance(acc.getBalance() + amount);</span><br><span class="line">		stateCheck();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;帐号受限，取款失败&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">computeInterest</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;计算利息！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//状态转换</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stateCheck</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(acc.getBalance() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			acc.setState(<span class="keyword">new</span> <span class="title class_">NormalState</span>(<span class="built_in">this</span>));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(acc.getBalance() &gt; -<span class="number">2000</span>) &#123;</span><br><span class="line">			acc.setState(<span class="keyword">new</span> <span class="title class_">OverdraftState</span>(<span class="built_in">this</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">		<span class="type">Account</span> <span class="variable">acc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="string">&quot;段誉&quot;</span>,<span class="number">0.0</span>);</span><br><span class="line">		acc.deposit(<span class="number">1000</span>);</span><br><span class="line">		acc.withdraw(<span class="number">2000</span>);</span><br><span class="line">		acc.deposit(<span class="number">3000</span>);</span><br><span class="line">		acc.withdraw(<span class="number">4000</span>);</span><br><span class="line">		acc.withdraw(<span class="number">1000</span>);</span><br><span class="line">		acc.computeInterest();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><h3 id="介绍-10"><a href="#介绍-10" class="headerlink" title="介绍"></a>介绍</h3><p>命令模式（Command Pattern）用于将请求（命令）封装成一个对象，使得可以将不同的请求参数化并且支持请求的排队、记录日志、撤销等操作</p>
<h3 id="结构-10"><a href="#结构-10" class="headerlink" title="结构"></a>结构</h3><p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/img/image-20230531111839798.png" alt="image-20230531111839798"></p>
<h3 id="角色-10"><a href="#角色-10" class="headerlink" title="角色"></a>角色</h3><ul>
<li>命令接口（Command）</li>
<li>具体命令（Concrete Command）</li>
<li>命令接收者（Receiver）</li>
<li>命令发起者（Invoker）</li>
</ul>
<h3 id="实现-10"><a href="#实现-10" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//	抽象命令</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 具体命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 帮助</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelpCommand</span> <span class="keyword">extends</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> DisplayHelpClass hcObj;   <span class="comment">//维持对请求接收者的引用</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">HelpCommand</span><span class="params">()</span> &#123;</span><br><span class="line">		hcObj = <span class="keyword">new</span> <span class="title class_">DisplayHelpClass</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//命令执行方法，将调用请求接收者的业务方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">		hcObj.display();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 退出</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExitCommand</span> <span class="keyword">extends</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> SystemExitClass seObj;  <span class="comment">//维持对请求接收者的引用</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">ExitCommand</span><span class="params">()</span> &#123;</span><br><span class="line">		seObj = <span class="keyword">new</span> <span class="title class_">SystemExitClass</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//命令执行方法，将调用请求接收者的业务方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">		seObj.exit();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接收者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DisplayHelpClass</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;显示帮助文档！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemExitClass</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exit</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;退出系统！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FunctionButton</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Command command;  <span class="comment">//维持一个抽象命令对象的引用</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//为功能键注入命令</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCommand</span><span class="params">(Command command)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.command = command;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//发送请求的方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">click</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.print(<span class="string">&quot;单击功能键: &quot;</span>);</span><br><span class="line">		command.execute();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="type">FunctionButton</span> <span class="variable">fb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FunctionButton</span>();</span><br><span class="line"></span><br><span class="line">		Command command; <span class="comment">//定义命令对象</span></span><br><span class="line">		command = (Command)XMLUtil.getBean(); <span class="comment">//读取配置文件，反射生成对象</span></span><br><span class="line"></span><br><span class="line">		fb.setCommand(command); <span class="comment">//将命令对象注入功能键</span></span><br><span class="line">		fb.click(); <span class="comment">//调用功能键的业务方法</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="組合模式"><a href="#組合模式" class="headerlink" title="組合模式"></a>組合模式</h2><h3 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h3><p>组合模式是一种结构型设计模式，用于将对象组合成树形结构以表示”部分-整体”的层次关系，使得用户对单个对象和组合对象的使用具有一致性。</p>
<h3 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h3><p><img src="https://oooooo.oss-cn-fuzhou.aliyuncs.com/img/image-20230531172221176.png" alt="image-20230531172221176"></p>
<h3 id="角色-11"><a href="#角色-11" class="headerlink" title="角色"></a>角色</h3><ul>
<li>组件（Component）：是组合中的抽象基类，定义了组合对象和叶子对象的共有操作接口。它可以是抽象类或接口，声明了一些用于管理子对象的方法，例如添加、删除、获取子对象等。</li>
<li>叶子（Leaf）：是组合中的叶子节点，表示组合对象中的基本元素，它没有子对象。</li>
<li>容器（Composite）：是组合中的容器节点，表示可以包含子对象的复杂对象。容器对象中通常会持有一个或多个子对象，并实现组合对象的共有操作接口。容器对象的操作会递归地调用子对象的操作，以实现对整个树形结构的操作。</li>
<li>客户端（Client）：通过组合对象的操作接口来操作组合对象和叶子对象。</li>
</ul>
<h3 id="實現"><a href="#實現" class="headerlink" title="實現"></a>實現</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//組件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractFile</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(AbstractFile file)</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(AbstractFile file)</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> AbstractFile <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">killVirus</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Folder</span> <span class="keyword">extends</span> <span class="title class_">AbstractFile</span> &#123;</span><br><span class="line">	<span class="comment">//定义集合fileList，用于存储AbstractFile类型的成员</span></span><br><span class="line">	<span class="keyword">private</span> ArrayList&lt;AbstractFile&gt; fileList=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;AbstractFile&gt;();</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Folder</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(AbstractFile file)</span> &#123;</span><br><span class="line">	   fileList.add(file);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(AbstractFile file)</span> &#123;</span><br><span class="line">		fileList.remove(file);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> AbstractFile <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (AbstractFile)fileList.get(i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">killVirus</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;****对文件夹&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;进行杀毒&quot;</span>);  <span class="comment">//模拟杀毒</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//递归调用成员构件的killVirus()方法</span></span><br><span class="line">		<span class="keyword">for</span>(Object obj : fileList) &#123;</span><br><span class="line">			((AbstractFile)obj).killVirus();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//葉子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ImageFile</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageFile</span> <span class="keyword">extends</span> <span class="title class_">AbstractFile</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">ImageFile</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(AbstractFile file)</span> &#123;</span><br><span class="line">	   System.out.println(<span class="string">&quot;对不起，不支持该方法！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(AbstractFile file)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;对不起，不支持该方法！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> AbstractFile <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;对不起，不支持该方法！&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">killVirus</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">//模拟杀毒</span></span><br><span class="line">		System.out.println(<span class="string">&quot;----对图像文件&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;进行杀毒&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//TextFile</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextFile</span> <span class="keyword">extends</span> <span class="title class_">AbstractFile</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">TextFile</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(AbstractFile file)</span> &#123;</span><br><span class="line">	   System.out.println(<span class="string">&quot;对不起，不支持该方法！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(AbstractFile file)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;对不起，不支持该方法！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> AbstractFile <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;对不起，不支持该方法！&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">killVirus</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">//模拟杀毒</span></span><br><span class="line">		System.out.println(<span class="string">&quot;----对文本文件&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;进行杀毒&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//VideoFile</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VideoFile</span> <span class="keyword">extends</span> <span class="title class_">AbstractFile</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">VideoFile</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(AbstractFile file)</span> &#123;</span><br><span class="line">	   System.out.println(<span class="string">&quot;对不起，不支持该方法！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(AbstractFile file)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;对不起，不支持该方法！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> AbstractFile <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;对不起，不支持该方法！&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">killVirus</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">//模拟杀毒</span></span><br><span class="line">		System.out.println(<span class="string">&quot;----对视频文件&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;进行杀毒&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客戶端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="comment">//针对抽象构件编程</span></span><br><span class="line">		AbstractFile file1,file2,file3,file4,file5,folder1,folder2,folder3,folder4;</span><br><span class="line"></span><br><span class="line">		folder1 = <span class="keyword">new</span> <span class="title class_">Folder</span>(<span class="string">&quot;Sunny的资料&quot;</span>);</span><br><span class="line">		folder2 = <span class="keyword">new</span> <span class="title class_">Folder</span>(<span class="string">&quot;图像文件&quot;</span>);</span><br><span class="line">		folder3 = <span class="keyword">new</span> <span class="title class_">Folder</span>(<span class="string">&quot;文本文件&quot;</span>);</span><br><span class="line">		folder4 = <span class="keyword">new</span> <span class="title class_">Folder</span>(<span class="string">&quot;视频文件&quot;</span>);</span><br><span class="line"></span><br><span class="line">		file1 = <span class="keyword">new</span> <span class="title class_">ImageFile</span>(<span class="string">&quot;小龙女.jpg&quot;</span>);</span><br><span class="line">		file2 = <span class="keyword">new</span> <span class="title class_">ImageFile</span>(<span class="string">&quot;张无忌.gif&quot;</span>);</span><br><span class="line">		file3 = <span class="keyword">new</span> <span class="title class_">TextFile</span>(<span class="string">&quot;九阴真经.txt&quot;</span>);</span><br><span class="line">		file4 = <span class="keyword">new</span> <span class="title class_">TextFile</span>(<span class="string">&quot;葵花宝典.doc&quot;</span>);</span><br><span class="line">		file5 = <span class="keyword">new</span> <span class="title class_">VideoFile</span>(<span class="string">&quot;笑傲江湖.rmvb&quot;</span>);</span><br><span class="line"></span><br><span class="line">		folder2.add(file1);</span><br><span class="line">		folder2.add(file2);</span><br><span class="line">		folder3.add(file3);</span><br><span class="line">		folder3.add(file4);</span><br><span class="line">		folder4.add(file5);</span><br><span class="line"></span><br><span class="line">		folder1.add(folder2);</span><br><span class="line">		folder1.add(folder3);</span><br><span class="line">		folder1.add(folder4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从“Sunny的资料”结点开始进行杀毒操作</span></span><br><span class="line">		folder1.killVirus();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="模式（模板）"><a href="#模式（模板）" class="headerlink" title="模式（模板）"></a>模式（模板）</h2><h3 id="介紹-1"><a href="#介紹-1" class="headerlink" title="介紹"></a>介紹</h3><h3 id="結構-1"><a href="#結構-1" class="headerlink" title="結構"></a>結構</h3><h3 id="角色-12"><a href="#角色-12" class="headerlink" title="角色"></a>角色</h3><h3 id="實現-1"><a href="#實現-1" class="headerlink" title="實現"></a>實現</h3>]]></content>
      <categories>
        <category>软件设计与架构</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>designPattern</tag>
      </tags>
  </entry>
</search>
